{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550977740393},{"_id":"source/404.md","hash":"8d0d831a77fe92a9e1530366ed90dec6d73d3aef","modified":1550977740362},{"_id":"themes/huxblog/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1550977740393},{"_id":"themes/huxblog/_config.yml","hash":"3c458e042f452e22ad3aa87001bc30970f5aa077","modified":1550977740409},{"_id":"source/_posts/深入理解计算机系统.md","hash":"e062e7bb2833d467ba57ec9b069360422a062d55","modified":1551755559556},{"_id":"source/archives/index.md","hash":"a9f0b3e5433bcb0efff2faa5709ab44da3bfd146","modified":1550977740377},{"_id":"source/about/index.md","hash":"ed1dd1c58371cbcb24ad03414991b02fa7ae6b8d","modified":1550977740377},{"_id":"source/img/avatar.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1550977740393},{"_id":"source/img/favicon.ico","hash":"a8ee7712f6560180efccb68546de6ea0d937fff3","modified":1550977740393},{"_id":"source/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1550977740393},{"_id":"source/tags/index.md","hash":"bc710b5b8db6f01940957ce744a37fd564752c3b","modified":1550977740393},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1550977740409},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1550977740409},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1550977740409},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1550977740409},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1550977740409},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1550977740409},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1550977740409},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1550977740409},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1550977740409},{"_id":"themes/huxblog/layout/404.ejs","hash":"c9b488d74c21fe9f35f642a5d19a138099ddf8a8","modified":1550977740409},{"_id":"themes/huxblog/layout/about.ejs","hash":"0671d30031c2c64dc4d8ef8a3b7632ddce38c6d1","modified":1550977740409},{"_id":"themes/huxblog/layout/archive.ejs","hash":"6c3ed5d914379319efe835a4aa505abbc616c328","modified":1550977740409},{"_id":"themes/huxblog/layout/archives.ejs","hash":"75665b1537a56be6f227fd05ca21ae0e7af82e6e","modified":1550977740409},{"_id":"themes/huxblog/layout/index.ejs","hash":"fe992342f8f96f87521c78cc3a164ff01086aa9b","modified":1550977740409},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"e177b9e4a159f40b512f4ae1bfd928be4ab60840","modified":1550977740409},{"_id":"themes/huxblog/layout/layout.ejs","hash":"a98fcc3a80f9e9cdedf3a613ff402806f8de7218","modified":1550977740409},{"_id":"themes/huxblog/layout/page.ejs","hash":"b38e42a4bd0364755d341c4897a46a3acd62a0fd","modified":1550977740409},{"_id":"themes/huxblog/layout/post.ejs","hash":"63a269d180a78e72e2ff5853ab579cf59ac943fa","modified":1550977740409},{"_id":"themes/huxblog/layout/tags.ejs","hash":"3b5cb37b097895e6045b4dca91b8d4e39535f806","modified":1550977740424},{"_id":"source/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1550977740393},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1550977740393},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"40d885fe82dc350f16698565440ddced47aeda3b","modified":1550977740409},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"5ac7025be02d6d6a605e7e20d02afaab1506fca3","modified":1550977740409},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"e65bfec3d14a9eb9f1e09b592bb34023e6bf6e83","modified":1550977740409},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1550977740409},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"50e36726c65ec8c6428ccbc375bcab79f76f2bc8","modified":1550977740424},{"_id":"themes/huxblog/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1550977740424},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1550977740424},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1550977740424},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1550977740424},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1550977740424},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1550977740424},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1550977740424},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1550977740424},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1550977740424},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1550977740440},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1550977740440},{"_id":"source/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1550977740393},{"_id":"source/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1550977740393},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"d2333a926ae25bbd3056814f13fec0843468e49e","modified":1550977740424},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1550977740424},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1550977740424},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1550977740440},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1550977740393},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1550977740424},{"_id":"themes/huxblog/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1550977740440},{"_id":"source/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1550977740393},{"_id":"public/404.html","hash":"a6fa0dfdf3a91494671f96f09916963012cccd04","modified":1551765489578},{"_id":"public/archives/index.html","hash":"40962ff2cb5d154e05c31dc12db6ac3b9b549a49","modified":1551765489579},{"_id":"public/tags/index.html","hash":"d5e917de63685fe3273c03178916addb24dd2baa","modified":1551765489603},{"_id":"public/i_dont_wanna_use_default_archives/index.html","hash":"1f14a95d21a116db4a1c1e7446a82b9b978e4616","modified":1551765489603},{"_id":"public/about/index.html","hash":"b4ac5161c115bd40e509a42f9b5d8a1c97af015b","modified":1551765489604},{"_id":"public/index.html","hash":"72948a9c5f8306de3682356f2bff63b011eb9d64","modified":1551765489605},{"_id":"public/i_dont_wanna_use_default_archives/2019/index.html","hash":"060ebb3d7846355c651fcf8a19f33f639609eaca","modified":1551765489609},{"_id":"public/i_dont_wanna_use_default_archives/2019/03/index.html","hash":"78bae99615941e2c5ec07cca9e549e2fb94ae330","modified":1551765489609},{"_id":"public/tags/计算机系统/index.html","hash":"701c30ae427d9e6bb1d24dc228adc5bf82067f5e","modified":1551765489609},{"_id":"public/tags/期末复习/index.html","hash":"948e03e8e931a0524d308e6a70ea5a3078a23d75","modified":1551765489609},{"_id":"public/2019/03/05/深入理解计算机系统/index.html","hash":"e9aa8bef95441e2e336001285dc9324189caad44","modified":1551765489609},{"_id":"public/img/favicon.ico","hash":"a8ee7712f6560180efccb68546de6ea0d937fff3","modified":1551765489614},{"_id":"public/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1551765489614},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1551765489614},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1551765489614},{"_id":"public/img/avatar.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1551765489840},{"_id":"public/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1551765489840},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1551765489840},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1551765489841},{"_id":"public/css/highlight.css","hash":"8bc5e670b028eda8097f58bdc85269c5124c2951","modified":1551765489845},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1551765489845},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1551765489845},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1551765489845},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1551765489846},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1551765489846},{"_id":"public/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1551765489849},{"_id":"public/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1551765489850},{"_id":"public/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1551765489853},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1551765489854},{"_id":"public/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1551765489854},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1551765489856},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1551765489859},{"_id":"public/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1551765489862},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1551765489863},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1551765489865},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1551765489867},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1551765489870},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1551765489874}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2019-02-24T03:19:45.475Z","updated":"2019-02-24T03:09:00.362Z","path":"404.html","title":"","comments":1,"_id":"cjsvd3u3n00008su3xkjnjfdo","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"archives","title":"Archives","description":"Hey, this is Archives.","header-img":"img/tag-bg.jpg","_content":"","source":"archives/index.md","raw":"---\nlayout: \"archives\"\ntitle: \"Archives\"\ndescription: \"Hey, this is Archives.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2019-02-24T03:09:00.377Z","updated":"2019-02-24T03:09:00.377Z","path":"archives/index.html","comments":1,"_id":"cjsvd3u4600018su3oyx9tceg","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2019-02-24T03:09:00.393Z","updated":"2019-02-24T03:09:00.393Z","path":"tags/index.html","comments":1,"_id":"cjsvd3u4700028su3smezi5r4","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","description":"Hey, this is Kaijun.","header-img":"img/about-bg.jpg","comments":1,"_content":"\n\n>写写代码，做做设计，看看产品。\n>世界那么大，多玩玩看看。\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br>\n<br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"Hey, this is Kaijun.\"\nheader-img: \"img/about-bg.jpg\"\ncomments: true\n---\n\n\n>写写代码，做做设计，看看产品。\n>世界那么大，多玩玩看看。\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br>\n<br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>","updated":"2019-02-24T03:09:00.377Z","path":"about/index.html","_id":"cjsvd3u4800038su3ilgi5u5j","content":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，多玩玩看看。</p>\n</blockquote>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\" target=\"_blank\" rel=\"noopener\">李书航 － 什么是「共产中文腔调」？ </a><br></p>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，多玩玩看看。</p>\n</blockquote>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\" target=\"_blank\" rel=\"noopener\">李书航 － 什么是「共产中文腔调」？ </a><br></p>"}],"Post":[{"title":"哈尔滨工业大学计算机系统2018年秋期末复习","urlname":"hit_data_structure_review","mathjax":true,"description":"一直想拥有一个自己的博客，但是却一拖再拖，始终没有推送一篇博文，仅以此篇--哈尔滨工业大学计算机系统的复习提纲，仅为期末复习所准备，慰藉以往无bolg的时光。","abbrlink":22353,"date":"2019-03-05T06:00:00.000Z","_content":"\n## 深入理解计算机系统\n\n- 计算机的字长，是指针数据的位长，表明了虚拟地址空间的大小\n\n- ASCII字符构成的文件成为文本文件，其他所有文件都称为二进制文件\n\n- 核心PC模型由指令集架构决定，操作围绕主存、寄存器文件、算术/逻辑单元ALU进行，进行加载、存储、操作、跳转等操作。\n\n- 存储器层次结构的基本思想：上一层的存储器作为第一层存储器的高速缓存\n\n- 操作系统的基本功能：1：防止硬件被失控 的应用程序滥用；2：向应用程序提供简单一致的机制来控制复杂而通常大而不同的低级硬件设备。 \n\n### 二、信息的表示和处理\n\n#### 2.1信息存储\n\n- 信息：\n\n```\n数值：值   小数点  符号（三要素）\n\n非数值：文字 图像 视频 语言\n```\n\n- 软件：\n\n  ```\n  系统软件：（用来管理整个计算机系统）\n  \n  语言处理程序  操作系统  服务型程序 数据\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t库管理系统 网络软件\n  ```\n\n- 计算机系统的层次结构：\n\n| 高级语言          | 虚拟机器M3   |\n| ----------------- | ------------ |\n| 汇编语言          | 虚拟机器M2   |\n| 操作系统          | 虚拟机器     |\n| 机器语言          | 实际机器M1   |\n| 微指令语言（时间) | 微程序机器M0 |\n- 机器数（码）：原码 反码 移码  补码\n\n- 数的逻辑：逻辑   算术（+ - * /） c语言中的数\n\n- 逻辑运算符&&和||与对应的位级运算符&和|第二个区别：\n\n  如果对第一个参数求值就能确定表达式的结果，那么逻辑运算符就不会对第二个参数求值。例如：a&&5/a不会造成被零除，p&&*p++不会导致间接引用空指针 \n\n- 集合的表示与运算\n\n  - 表示：位向量表示有限集合\n\n```\neg：10100110   从右到左表示 该集合={1，2，5，7}\n```\n\n- 运算：& 交集     |  并集    ^  对称差集    ~  补集                  \n\n- 左移补0，但右移分为逻辑右移和算术右移，逻辑右移左端补0，算术右移左端补最高有效位的值。c语言对此没有区分，但大多数编译器对有符号数使用算术右移；无符号数右移必须是逻辑的 。Java对右移有明确的规定，x>>k表示x算术右移k个位置，x>>>k表示逻辑右移\n\n#### 2.2整数表示\n\n##### 1)整数编码\n\n有符号数：补码\n\nB2T(X) = $-X_{w-1}2^{w-1}+\\sum_{i=0}^{w-2}X_i2_i$\n\n例：\n\n|      | 10进制 | 16进制 | 2进制                             |\n| ---- | ------ | ------ | --------------------------------- |\n| X    | 15213  | 3B 6D  | 0011011 01101101                  |\n| Y    | -15213 | C4 93  | 1100100 10010011(最高位1表示负数) |\n\n\n|      | 原码       | 反码      | 补码      |\n| ---- | ---------- | --------- | --------- |\n| 11   | 0000 1011  | 0000 1011 | 0000 1011 |\n| -11  | 1000  1011 | 1111 0100 | 1111 0101 |\n\n注:负数的补码为反码加1,  正数的 原码、反码、补码都相同\n\n##### 2)知识细节\n\n- 有符号数同一表示形式下，负数的表示范围 比正数的范围大1  \n\n  同一位数：补码的范围不对称，|TMin|=|TMax|+1；                                                                                                                        \t  \t同一位数：最大的无符号数比有符号数的两倍多1，即：UMax = 2TMax + 1​\t\t\t\t\n\n- 对于大多数C语言，处理同样字长的有符号数和无符号数规则：数值可能改变，但位模式不变\n\n​\teg：short v = -12345;    unsigned short  uv = (unsigned short) v;     uv=53191  这里-12345的16位补码和53191的16位编码相同\n\n​\t无符号数和有符号数之间的转换规则：T-->U:补码转化为无符号数       U-->T:无符号数转化为补码\n\n​\t参与运算时，如果有无符号数出现在同一表达式，则有符号数强制转化为无符号数​\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\n- 扩展一个数字的位表示：无符号数零扩展，补码数(有符号数)符号扩展​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n- 截断无符号数：丢弃高位取地位；  截断有符号数：截断后将最高位转化为符号位​\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n#### 2.3整数运算\n\n##### 1)有符号数和无符号数转换的基本原则：\n\n```\n-位模式不变\n\n-重新解读（按目标编码类型的规则解读）\n\n-会有意外的副作用：数值被 + 或 -$2^w$\n\n-当表达式中有符号数和无符号数混合时，有符号数转化为无符号数\n```\n\n加法:\t无/有符号数的加法：正常加法后再截断，位级的运算相同\n\n​\t\t无符号数：加后对$2^w$求模\n\n##### 2)符号位扩展\n\n```\n-无符号数：填充0\n\n-有符号位：符号扩展\n\n\t\t\teg：-15213    二进制：11000100 10010011  ---> 11111111 11111111 11000100 10010011\n\n-结果都是明确的预期值\n```\n\n##### 3)截断\n\n```\n-无论有无符号数，多出的位数都被截断\n\n-结果重新解读\n\n-无符号数: 相当于求模运算\n\n-有符号数：和求模运算相似\n```\n\n​\t-对于小整数，结果是明确的预期值\n\n##### 4)检测无符号数加法中的溢出：\n\n​\ts =x+y,当且仅当s < x(或等价的s < y)时发生了溢出\n\n​\t无符号数逆元（求反）：x=0时：-x=0\n\n​\t\t\t\t   x > 0时: -x = $2^w$\n\n##### 5)补码加法：\n\n对于-$2^{w-1}\\le,y\\le2^{w-1}$-1的整数x和y，有\n$$\n\\begin{equation}x+^t_wy=\\begin{cases}x+y-2^w& 2^{w-1}\\le{x+y} & 正溢出\\\\x+y & -2^{w-1}\\le{x+y}<2^{w-1} & 正常\\\\x+y+2^w & x+y<-2^{w-1} & 负溢出\\end{cases}\\end{equation}\n$$\n​     对于满足TMi$n_w\\le$x,y$\\le$TMax$_w$的和y，令s=x+y,当且仅当x > 0,y > 0但s$\\le$0时发生了正溢出；当且仅当x < 0,y < 0但s$\\geq$0时发生了正溢出  \n\n##### 6)补码的非                                                                                    \n\n对满足$TMin_w\\le x\\le TMax_w$\t的$x$，其补码的非$-^t_wx$由下式给出：\n$$\n\\begin{equation}-^t_wx=\\begin{cases}TMin_w& x = TMin_w\\\\-x & x>TMin_w\\end{cases}\\end{equation}\n$$\n也就是说，对w位的补码加法来说，$TMin_w$是自己的加法的逆，而对其他的都有$-x$作为其加法的逆\n\n##### 7）补码非的位级表示\n\n​\t方法一：对每一位求补，再对结果加1\n\n​\t方法二：找到最右边的第一个1的位置，然后将该位置左边的所有为取反\n\n#### 2.4浮点数\n\n- IEEE标准：\n\n![浮点数标准分类](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数标准分类.PNG)\n\n- 浮点数规格化的值（frac、exp）\n\n![浮点数规格化的值](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数规格化的值.PNG)\n\n- 对于非规格化值：E=1-Bisas，M=f，不包括隐含的开头的1 ![浮点数规格化的值](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数规格化的值.PNG) \n\n- 舍入\n\n![浮点数舍入](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数舍入.PNG)\n\n​\t将float或double转化成int，值将向零舍入                    \n\n### 三、程序的机器级表示\n\n#### 3.3数据格式\n\nc数据类型的宽度\n\n| c数据类型   | 32位 | 64位 | x86-64 |\n| ----------- | ---- | ---- | ------ |\n| char        | 1    | 1    | 1      |\n| short       | 2    | 2    | 2      |\n| int         | 4    | 4    | 4      |\n| long        | 4    | 8    | 8      |\n| float       | 4    | 4    | 4      |\n| double      | 8    | 8    | 8      |\n| long double | -    | -    | 10/16  |\n| pointer     | 4    | 8    | 8      |\n\n\n#### 3.4访问信息\n\n- 常规的movq指令只能以表示为32位补码数字的立即数作为源操作数，然后把这个值符号扩展到64位的值放大目的位置；\n\n- MOVZ类中的指令把目的中剩余的字节填充为0，而MOVS类中的指令通过符号扩展来填充，把源操作数的最高位进行复制。\n\n​\tMOVZ类（零扩展）的指令：以寄存器或地址内存作为源，以寄存器作为目的；\n\n​\tMOVS类（符号扩展）的指令：以寄存器或地址内存作为源，以寄存器作为目的；cltq指令无操作数：只作用于%eax和%rax\n\n#### 3.5算术和逻辑操作\n\n![算术和逻辑操作指令](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\算术和逻辑操作指令.PNG)\n\n（1）leap指令目的操作数必须是寄存器\n\n（2）左移指令有两个：SAL和SHL，两者效果一样，都是右边补0；右移指令不同，SAR执行算术移位，补充符号位，而SHR执行逻辑移位，补充0\n\n（3）特殊的算术操作\n\n![特殊的操作指令](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\特殊的操作指令.PNG)\n\n有符号除法指令 idivl 将%rdx高64位和%rax低64位中的128位作为被除数，而除数作为指令的操作数给出。指令将商存储在%rax，余数存储在%rdx\n\ncqto指令可以不需要操作数，隐含读出%rax的符号位并将其复制到%rdx的每一位\n\n#### 3.6控制\n\n（1）leaq指令不改变条件码\n\n（2）CMP指令和TEST指令只改变条件码，前者基于sub，后者基于and\n\n（3）条件码通常不会直接读取，常用使用方法：\n\n​\ta、根据条件码的某种组合将一个字节设置为0或1（即set指令）\n\n​\tb、条件跳转到程序的某个其他部分\n\n​\tc、有条件的传送数据\n\n（4）set指令：\n\n![set指令](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\set指令.PNG)\n\n#### 3.7过程\n\n （1）传递控制、传递数据、分配和释放内存\n\n![栈结构](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\栈结构.PNG)\n\n（2）调用函数前，把所有的参数都先存储，包括形参，存储完毕才开始调用函数\n\n（3）栈上的局部变量（局部数据必须用主存的情况)\n\n​\t1）寄存器不足够存放所有的本地数据\n\n​\t2）对一个局部变量使用取址符&，因此必须为其产生一个地址\n\n​\t3）某些局部变量是数组或结构，因此必须通过数组或结构引用访问到。\n\n注：寄存器是唯一被所有过程共享的资源\n\n#### 3.10对抗缓冲区溢出\n\n方法：1、栈随机化 ；2、栈破坏检测 ；3、限制可执行代码区域\n\n#### 3.11过程中的浮点代码\n\n- XMM寄存器8xmn0~ 8xmm7最多可以传递8个浮点参数。按照参数列出的顺序使用这些寄存器。可以通过栈传递额外的浮点参数。\n\n- 函数使用寄存器%xmm0来返回浮点值。\n\n- 所有的XMM寄存器都是调用者保存的。被调用者可以不用保存就覆盖这些寄存器\n  中任意一个。\n\n  | 单精度 | 双精度 | 效果   | 描述                    |\n  | ------ | ------ | ------ | ----------------------- |\n  | vxorps | vorpd  | D<-x*y | 位级异或（EXCLUSIVE-OR) |\n  | vandps | andpd  | D<-x&y | 位级与（AND）           |\n\n| 指令        | 基于 | 描述         |\n| ----------- | ---- | ------------ |\n| ucomiss x,y | y-x  | 比较单精度值 |\n| ucomisd x,y | y-x  | 比较双精度值 |\n\n### 四、处理器体系结构\n\n1、程序计数器PC保存当前正在执行指令的地址\n\n2、内存从概念上来说就是一个很大的字节数组，保存着程序和数据。Y86-64程序用虚拟地址来引用内存位置。硬件和操作系统软件联合起来将虚拟地址翻译成实际或物理地址\n\n3、Y86-64每条指令需要1~10个字节不等，每条指令的第一个字节表明指令的类型，这个字节分为两部分，每部分4位：高四位是代码部分，低四位是指令部分。功能值只有在一组相关指令共用一个代码时才有用。\n\n4、指令集的一个重要性质就是每个字节编码必须有唯一的解释\n\n5、时钟寄存器：存储单个字：PC、条件代码和程序状态Stat                                                                                                                  随机访问存储器：存储多个字\n\n6、指令处理：\n\n取指、译码、执行、访存、写回、更新PC\n\n7、SEQ的实现包括组合逻辑和两种存储设备：时钟寄存器和随机访问寄存器。四个硬件单元对时序控制：程序计数器、条件码寄存器、数据内存和寄存器文件，通过时钟信号控制。\n\n8、组织原则：从不读回，即处理器从来不需要为了完成一条指令的执行而去读由该指令更新了的状态。\n\n9、每个周期开始前，状态单元（PC、条件码、数据内存、寄存器文件）是根据前一条指令设置的。信号传播通过组合逻辑，创建出新的状态单元的值。\n\n### 五、优化程序性能\n\n- 程序性能标准：每元素的周期数CPE\n\n- 优化方法：\n\n  1、消除循环低效率：代码移动：\n\n  2、减少过程调用\n\n  3、消除不必要的内存引用\n\n  4、循环展开：减少迭代次数\n\n  5、提高并行性：多个累计变量并行求、重新结合变换\n\n- 课本总结：\n\n  1）高级设计：算法和数据结构\n\n  2）基本编码原则：\n\n  - 消除连续的函数调用：将计算移动到循环外\n\n  - 消除不必要的内存引用：引用临时变量保存中间结果，最后结果得出才放入数组或全局变量\n\n  3）低级优化：\n\n  - 展开循环，降低开销，并且使进一步优化成为可能\n\n  - 通过使用例如多个累积变量和重新结合等技术，提高指令集并行\n\n  - 用功能性的风格重写条件操作，使得编译采用条件数据传送\n\n- 限制因素：\n\n  1、寄存器溢出\n\n  2、分支预测错误和预测错误处罚：不过分关心可预测的分支、书写适合条件传送的代码\n\n### 六、存储器层次结构\n\n#### 6.1存储技术\n\n######  6.1.1随机访问存储器\n\n随机访问存储器分（RAM）为两类：静态SRAM（更快）和动态DRAM\n\n（1）静态（SRAM）\n\nSRAM将每个位存储在一个双稳态的存储器单元，每个单元由一个六晶体管电路实现，可无限期保持在两个不同的电压配置或状态之一\n\n（2）动态（DRAM）\n\nDRAM将每个位存储为对一个电容的充电，对干扰敏感且不能恢复\n\n对比：\n\n![SRAM和DRAM对比](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\SRAM和DRAM对比.PNG)\n\n（3）传统的DRAM\n\nDRAM芯片中的单元（位）被分成d个超单元，每个超单元由w个DRAM单元组成，一个d*w的DRAM存储了dw位信息。超单元被组织成r行c列的矩阵，rc=d。\n\n每个超单元存储一个字节\n\n(4)内存模块\n\n--DRAM芯片封装在内存模块中，插到主板的扩展槽上\n\n--内存地址A取值过程：\n\n![6.1.1内存地址取值](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\6.1.1内存地址取值.PNG)\n\n\n\n（5）增强的DRAM\n\n快页模式DRAM、扩展数据输出DRAM、同步DRAM、双倍数据速率同步DRAM、视频RAM\n\n（6）非易失性存储器\n\nROM\n\n（7）访问主存\n\n总线：能够携带地址、数据和控制信号，分为：系统总线和内存总线\n\n###### 6.12磁盘存储\n\n磁盘读取时间计算：\n\n![磁盘读取时间计算](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\磁盘读取时间计算.PNG)\n\n#### 6.2局部性\n\n   (1)重复引用相同局部变量的程序具有良好的时间局部性\n\n（2）步长越小，空间局部性越好\n\n（3）对于取值指令，循环具有良好的时间和空间局部性，循环体越小，循环迭代次数越多，局部性越好\n\n#### 6.3存储器层次结构\n\n存储器层次结构\n\n![存储器层次结构](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\存储器层次结构.PNG)\n\n\n\n#### 6.4高速缓存存储器\n\n缓存不命中：\n\n- 冷不命中（强制性不命中）：\n\n  k层缓存有空行，程序最开始运行时均为冷不命中\n\n- 冲突不命中\n\n  k层中没有空行 \n\n- 容量不命中\n\n组相连高速缓存、组相连高速缓存、全相连高速缓存\n\n#### 6.5编写高速缓存存储器\n\n写命中：\n\n直写：高速缓存中更新的数据立即写回到低一层中\n\n写回：尽可能推迟更新，当替换算法要驱逐这个更新过的块时，才把它写到紧接着的低一层中\n\n写不命中：\n\n写分配：加载相应的低一层的块到高速缓存中，然后更新这个高速缓存块\n\n非写分配：避开高速缓存，直接把这个字写到低一层中\n\n**直写高速缓存通常时写分配的，写回高速缓存通常是非写分配的\n\n#### 6.6综合：高速缓存对程序性能的影响\n\n如果一个高速缓存的块大小为B字节，那么一个步长为k（字）的引用模式平均每次循环迭代会有min（1，（wordsize*k)/k））次缓存不命中\n\n### 八、异常控制流\n\n#### 8.1异常\n\n（1）异常是控制流中的突变，用来响应处理器状态中的变化。是异常控制流的一种形式，一部分由硬件实现，一部分由操作系统实现\n\n（2）事件处理：\n\n![8.1事件处理](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\8.1事件处理.PNG)\n\n（3）异常分类\n\n![异常分类](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\异常分类.PNG)\n\n![异常分类2](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\异常分类2.PNG)\n\n#### 8.2进程\n\n进程：一个执行中程序的实例。系统中每个程序都运行在某个进程的上下文中。上下文是由程序正确运行所需的状态组成\n\n进程提供的关键抽象：\n\n一个独立的逻辑控制流、一个私有的地址空间\n\n- 并发流：一个逻辑流的执行在时间上与另一个流重叠，称为并发流，这两个流被称为并发的运行。多个流并发地执行一般现象被称为并发。一个进程和其他进程轮流运行的概念称为多任务。一个进程执行它的控制流的一部分的每一时间段叫做时间片，因此，多任务也叫时间分片。\n\n- 如果两个流并发的运行在不同的处理器核或计算机上，那么我们称它们为并行流，它们并行地运行，且并行地执行\n\n- 进程地址空间\n\n  ![进程地址空间](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\进程地址空间.PNG)\n\n- 用户模式和内核模式：进程从用户模式切换到内核模式的唯一方式是异常\n\n- 上下文切换：\n\n  1）保存当前进程的上下文；  2）恢复某个先前被抢占的进程被保存的上下文； 3）将控制传递给这个新恢复的进程\n\n#### 8.4进程控制\n\n- 进程的三种状态：\n\n运行：进程要么被执行，要么等待被执行且被内核调度\n\n停止：进程的执行被挂起，且不会被调度。当收到SIGSTOP 、SIGTSTP、SIGTTIN、SIGTOUT信号时，进程停止，并且保持到收到SIGCOUT信号\n\n终止：1）收到一个信号，该信号的默认行为是终止；2）从主程序返回；3）调用exit函数\n\n- 父进程和子进程最大的区别是PID不同。\n\nfork被调用一次，返回两次。一次是在父进程中，fork返回子进程的PID，一次是在新建的子进程中，返回0；\n\n- 子进程和父进程：\n\n  1）fork函数调用一次，返回两次；2）子进程和父进程并发运行；3）相同但是独立的地址空间；4）共享文件\n\n- pid_t wait_pid(int *statusp) : 如果成功，返回子进程的PID；如果WNOHANG，返回0；如果其他错误，返回-1\n\n- unsigned int sleep(unsigned int secs)：返回还要休眠的秒数\n\n- int pause(void)：总是返回-1，让函数休眠，直到该进程接收到另一个信号\n\n- execve:在当前进程的上下文中加载并运行一个新程序，从不返回，（如果找不到filename，才会返回到调用程序）。\n\n#### 8.5.5编写信号处理程序\n\n1、安全的信号处理\n\n（1）处理程序要尽可能的简单\n\n（2）在处理程序中只调用异步信号安全的函数\n\n（3）保存和恢复errno\n\n（4）阻塞所有信号，保护对共享数据结构的访问\n\n（5）用volatile声明全局变量\n\n（6）用sig_atomic_t声明标志\n\n2、正确的信号处理：未处理的信号不排队\n\n3、可移植的信号处理\n\n\n\n由于本人有一丢丢懒~，漏掉的一些内容懒得更新，排版也只是凑合，还请大家原谅啦啦-----\n\n","source":"_posts/深入理解计算机系统.md","raw":"---\ntitle: 哈尔滨工业大学计算机系统2018年秋期末复习\nurlname: hit_data_structure_review\nmathjax: true\ntags:\n  - 计算机系统\n  - 期末复习\ndescription: 一直想拥有一个自己的博客，但是却一拖再拖，始终没有推送一篇博文，仅以此篇--哈尔滨工业大学计算机系统的复习提纲，仅为期末复习所准备，慰藉以往无bolg的时光。\nabbrlink: 22353\ndate: 2019-03-05 14:00:00\n---\n\n## 深入理解计算机系统\n\n- 计算机的字长，是指针数据的位长，表明了虚拟地址空间的大小\n\n- ASCII字符构成的文件成为文本文件，其他所有文件都称为二进制文件\n\n- 核心PC模型由指令集架构决定，操作围绕主存、寄存器文件、算术/逻辑单元ALU进行，进行加载、存储、操作、跳转等操作。\n\n- 存储器层次结构的基本思想：上一层的存储器作为第一层存储器的高速缓存\n\n- 操作系统的基本功能：1：防止硬件被失控 的应用程序滥用；2：向应用程序提供简单一致的机制来控制复杂而通常大而不同的低级硬件设备。 \n\n### 二、信息的表示和处理\n\n#### 2.1信息存储\n\n- 信息：\n\n```\n数值：值   小数点  符号（三要素）\n\n非数值：文字 图像 视频 语言\n```\n\n- 软件：\n\n  ```\n  系统软件：（用来管理整个计算机系统）\n  \n  语言处理程序  操作系统  服务型程序 数据\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t库管理系统 网络软件\n  ```\n\n- 计算机系统的层次结构：\n\n| 高级语言          | 虚拟机器M3   |\n| ----------------- | ------------ |\n| 汇编语言          | 虚拟机器M2   |\n| 操作系统          | 虚拟机器     |\n| 机器语言          | 实际机器M1   |\n| 微指令语言（时间) | 微程序机器M0 |\n- 机器数（码）：原码 反码 移码  补码\n\n- 数的逻辑：逻辑   算术（+ - * /） c语言中的数\n\n- 逻辑运算符&&和||与对应的位级运算符&和|第二个区别：\n\n  如果对第一个参数求值就能确定表达式的结果，那么逻辑运算符就不会对第二个参数求值。例如：a&&5/a不会造成被零除，p&&*p++不会导致间接引用空指针 \n\n- 集合的表示与运算\n\n  - 表示：位向量表示有限集合\n\n```\neg：10100110   从右到左表示 该集合={1，2，5，7}\n```\n\n- 运算：& 交集     |  并集    ^  对称差集    ~  补集                  \n\n- 左移补0，但右移分为逻辑右移和算术右移，逻辑右移左端补0，算术右移左端补最高有效位的值。c语言对此没有区分，但大多数编译器对有符号数使用算术右移；无符号数右移必须是逻辑的 。Java对右移有明确的规定，x>>k表示x算术右移k个位置，x>>>k表示逻辑右移\n\n#### 2.2整数表示\n\n##### 1)整数编码\n\n有符号数：补码\n\nB2T(X) = $-X_{w-1}2^{w-1}+\\sum_{i=0}^{w-2}X_i2_i$\n\n例：\n\n|      | 10进制 | 16进制 | 2进制                             |\n| ---- | ------ | ------ | --------------------------------- |\n| X    | 15213  | 3B 6D  | 0011011 01101101                  |\n| Y    | -15213 | C4 93  | 1100100 10010011(最高位1表示负数) |\n\n\n|      | 原码       | 反码      | 补码      |\n| ---- | ---------- | --------- | --------- |\n| 11   | 0000 1011  | 0000 1011 | 0000 1011 |\n| -11  | 1000  1011 | 1111 0100 | 1111 0101 |\n\n注:负数的补码为反码加1,  正数的 原码、反码、补码都相同\n\n##### 2)知识细节\n\n- 有符号数同一表示形式下，负数的表示范围 比正数的范围大1  \n\n  同一位数：补码的范围不对称，|TMin|=|TMax|+1；                                                                                                                        \t  \t同一位数：最大的无符号数比有符号数的两倍多1，即：UMax = 2TMax + 1​\t\t\t\t\n\n- 对于大多数C语言，处理同样字长的有符号数和无符号数规则：数值可能改变，但位模式不变\n\n​\teg：short v = -12345;    unsigned short  uv = (unsigned short) v;     uv=53191  这里-12345的16位补码和53191的16位编码相同\n\n​\t无符号数和有符号数之间的转换规则：T-->U:补码转化为无符号数       U-->T:无符号数转化为补码\n\n​\t参与运算时，如果有无符号数出现在同一表达式，则有符号数强制转化为无符号数​\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\n- 扩展一个数字的位表示：无符号数零扩展，补码数(有符号数)符号扩展​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n- 截断无符号数：丢弃高位取地位；  截断有符号数：截断后将最高位转化为符号位​\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n#### 2.3整数运算\n\n##### 1)有符号数和无符号数转换的基本原则：\n\n```\n-位模式不变\n\n-重新解读（按目标编码类型的规则解读）\n\n-会有意外的副作用：数值被 + 或 -$2^w$\n\n-当表达式中有符号数和无符号数混合时，有符号数转化为无符号数\n```\n\n加法:\t无/有符号数的加法：正常加法后再截断，位级的运算相同\n\n​\t\t无符号数：加后对$2^w$求模\n\n##### 2)符号位扩展\n\n```\n-无符号数：填充0\n\n-有符号位：符号扩展\n\n\t\t\teg：-15213    二进制：11000100 10010011  ---> 11111111 11111111 11000100 10010011\n\n-结果都是明确的预期值\n```\n\n##### 3)截断\n\n```\n-无论有无符号数，多出的位数都被截断\n\n-结果重新解读\n\n-无符号数: 相当于求模运算\n\n-有符号数：和求模运算相似\n```\n\n​\t-对于小整数，结果是明确的预期值\n\n##### 4)检测无符号数加法中的溢出：\n\n​\ts =x+y,当且仅当s < x(或等价的s < y)时发生了溢出\n\n​\t无符号数逆元（求反）：x=0时：-x=0\n\n​\t\t\t\t   x > 0时: -x = $2^w$\n\n##### 5)补码加法：\n\n对于-$2^{w-1}\\le,y\\le2^{w-1}$-1的整数x和y，有\n$$\n\\begin{equation}x+^t_wy=\\begin{cases}x+y-2^w& 2^{w-1}\\le{x+y} & 正溢出\\\\x+y & -2^{w-1}\\le{x+y}<2^{w-1} & 正常\\\\x+y+2^w & x+y<-2^{w-1} & 负溢出\\end{cases}\\end{equation}\n$$\n​     对于满足TMi$n_w\\le$x,y$\\le$TMax$_w$的和y，令s=x+y,当且仅当x > 0,y > 0但s$\\le$0时发生了正溢出；当且仅当x < 0,y < 0但s$\\geq$0时发生了正溢出  \n\n##### 6)补码的非                                                                                    \n\n对满足$TMin_w\\le x\\le TMax_w$\t的$x$，其补码的非$-^t_wx$由下式给出：\n$$\n\\begin{equation}-^t_wx=\\begin{cases}TMin_w& x = TMin_w\\\\-x & x>TMin_w\\end{cases}\\end{equation}\n$$\n也就是说，对w位的补码加法来说，$TMin_w$是自己的加法的逆，而对其他的都有$-x$作为其加法的逆\n\n##### 7）补码非的位级表示\n\n​\t方法一：对每一位求补，再对结果加1\n\n​\t方法二：找到最右边的第一个1的位置，然后将该位置左边的所有为取反\n\n#### 2.4浮点数\n\n- IEEE标准：\n\n![浮点数标准分类](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数标准分类.PNG)\n\n- 浮点数规格化的值（frac、exp）\n\n![浮点数规格化的值](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数规格化的值.PNG)\n\n- 对于非规格化值：E=1-Bisas，M=f，不包括隐含的开头的1 ![浮点数规格化的值](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数规格化的值.PNG) \n\n- 舍入\n\n![浮点数舍入](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数舍入.PNG)\n\n​\t将float或double转化成int，值将向零舍入                    \n\n### 三、程序的机器级表示\n\n#### 3.3数据格式\n\nc数据类型的宽度\n\n| c数据类型   | 32位 | 64位 | x86-64 |\n| ----------- | ---- | ---- | ------ |\n| char        | 1    | 1    | 1      |\n| short       | 2    | 2    | 2      |\n| int         | 4    | 4    | 4      |\n| long        | 4    | 8    | 8      |\n| float       | 4    | 4    | 4      |\n| double      | 8    | 8    | 8      |\n| long double | -    | -    | 10/16  |\n| pointer     | 4    | 8    | 8      |\n\n\n#### 3.4访问信息\n\n- 常规的movq指令只能以表示为32位补码数字的立即数作为源操作数，然后把这个值符号扩展到64位的值放大目的位置；\n\n- MOVZ类中的指令把目的中剩余的字节填充为0，而MOVS类中的指令通过符号扩展来填充，把源操作数的最高位进行复制。\n\n​\tMOVZ类（零扩展）的指令：以寄存器或地址内存作为源，以寄存器作为目的；\n\n​\tMOVS类（符号扩展）的指令：以寄存器或地址内存作为源，以寄存器作为目的；cltq指令无操作数：只作用于%eax和%rax\n\n#### 3.5算术和逻辑操作\n\n![算术和逻辑操作指令](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\算术和逻辑操作指令.PNG)\n\n（1）leap指令目的操作数必须是寄存器\n\n（2）左移指令有两个：SAL和SHL，两者效果一样，都是右边补0；右移指令不同，SAR执行算术移位，补充符号位，而SHR执行逻辑移位，补充0\n\n（3）特殊的算术操作\n\n![特殊的操作指令](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\特殊的操作指令.PNG)\n\n有符号除法指令 idivl 将%rdx高64位和%rax低64位中的128位作为被除数，而除数作为指令的操作数给出。指令将商存储在%rax，余数存储在%rdx\n\ncqto指令可以不需要操作数，隐含读出%rax的符号位并将其复制到%rdx的每一位\n\n#### 3.6控制\n\n（1）leaq指令不改变条件码\n\n（2）CMP指令和TEST指令只改变条件码，前者基于sub，后者基于and\n\n（3）条件码通常不会直接读取，常用使用方法：\n\n​\ta、根据条件码的某种组合将一个字节设置为0或1（即set指令）\n\n​\tb、条件跳转到程序的某个其他部分\n\n​\tc、有条件的传送数据\n\n（4）set指令：\n\n![set指令](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\set指令.PNG)\n\n#### 3.7过程\n\n （1）传递控制、传递数据、分配和释放内存\n\n![栈结构](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\栈结构.PNG)\n\n（2）调用函数前，把所有的参数都先存储，包括形参，存储完毕才开始调用函数\n\n（3）栈上的局部变量（局部数据必须用主存的情况)\n\n​\t1）寄存器不足够存放所有的本地数据\n\n​\t2）对一个局部变量使用取址符&，因此必须为其产生一个地址\n\n​\t3）某些局部变量是数组或结构，因此必须通过数组或结构引用访问到。\n\n注：寄存器是唯一被所有过程共享的资源\n\n#### 3.10对抗缓冲区溢出\n\n方法：1、栈随机化 ；2、栈破坏检测 ；3、限制可执行代码区域\n\n#### 3.11过程中的浮点代码\n\n- XMM寄存器8xmn0~ 8xmm7最多可以传递8个浮点参数。按照参数列出的顺序使用这些寄存器。可以通过栈传递额外的浮点参数。\n\n- 函数使用寄存器%xmm0来返回浮点值。\n\n- 所有的XMM寄存器都是调用者保存的。被调用者可以不用保存就覆盖这些寄存器\n  中任意一个。\n\n  | 单精度 | 双精度 | 效果   | 描述                    |\n  | ------ | ------ | ------ | ----------------------- |\n  | vxorps | vorpd  | D<-x*y | 位级异或（EXCLUSIVE-OR) |\n  | vandps | andpd  | D<-x&y | 位级与（AND）           |\n\n| 指令        | 基于 | 描述         |\n| ----------- | ---- | ------------ |\n| ucomiss x,y | y-x  | 比较单精度值 |\n| ucomisd x,y | y-x  | 比较双精度值 |\n\n### 四、处理器体系结构\n\n1、程序计数器PC保存当前正在执行指令的地址\n\n2、内存从概念上来说就是一个很大的字节数组，保存着程序和数据。Y86-64程序用虚拟地址来引用内存位置。硬件和操作系统软件联合起来将虚拟地址翻译成实际或物理地址\n\n3、Y86-64每条指令需要1~10个字节不等，每条指令的第一个字节表明指令的类型，这个字节分为两部分，每部分4位：高四位是代码部分，低四位是指令部分。功能值只有在一组相关指令共用一个代码时才有用。\n\n4、指令集的一个重要性质就是每个字节编码必须有唯一的解释\n\n5、时钟寄存器：存储单个字：PC、条件代码和程序状态Stat                                                                                                                  随机访问存储器：存储多个字\n\n6、指令处理：\n\n取指、译码、执行、访存、写回、更新PC\n\n7、SEQ的实现包括组合逻辑和两种存储设备：时钟寄存器和随机访问寄存器。四个硬件单元对时序控制：程序计数器、条件码寄存器、数据内存和寄存器文件，通过时钟信号控制。\n\n8、组织原则：从不读回，即处理器从来不需要为了完成一条指令的执行而去读由该指令更新了的状态。\n\n9、每个周期开始前，状态单元（PC、条件码、数据内存、寄存器文件）是根据前一条指令设置的。信号传播通过组合逻辑，创建出新的状态单元的值。\n\n### 五、优化程序性能\n\n- 程序性能标准：每元素的周期数CPE\n\n- 优化方法：\n\n  1、消除循环低效率：代码移动：\n\n  2、减少过程调用\n\n  3、消除不必要的内存引用\n\n  4、循环展开：减少迭代次数\n\n  5、提高并行性：多个累计变量并行求、重新结合变换\n\n- 课本总结：\n\n  1）高级设计：算法和数据结构\n\n  2）基本编码原则：\n\n  - 消除连续的函数调用：将计算移动到循环外\n\n  - 消除不必要的内存引用：引用临时变量保存中间结果，最后结果得出才放入数组或全局变量\n\n  3）低级优化：\n\n  - 展开循环，降低开销，并且使进一步优化成为可能\n\n  - 通过使用例如多个累积变量和重新结合等技术，提高指令集并行\n\n  - 用功能性的风格重写条件操作，使得编译采用条件数据传送\n\n- 限制因素：\n\n  1、寄存器溢出\n\n  2、分支预测错误和预测错误处罚：不过分关心可预测的分支、书写适合条件传送的代码\n\n### 六、存储器层次结构\n\n#### 6.1存储技术\n\n######  6.1.1随机访问存储器\n\n随机访问存储器分（RAM）为两类：静态SRAM（更快）和动态DRAM\n\n（1）静态（SRAM）\n\nSRAM将每个位存储在一个双稳态的存储器单元，每个单元由一个六晶体管电路实现，可无限期保持在两个不同的电压配置或状态之一\n\n（2）动态（DRAM）\n\nDRAM将每个位存储为对一个电容的充电，对干扰敏感且不能恢复\n\n对比：\n\n![SRAM和DRAM对比](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\SRAM和DRAM对比.PNG)\n\n（3）传统的DRAM\n\nDRAM芯片中的单元（位）被分成d个超单元，每个超单元由w个DRAM单元组成，一个d*w的DRAM存储了dw位信息。超单元被组织成r行c列的矩阵，rc=d。\n\n每个超单元存储一个字节\n\n(4)内存模块\n\n--DRAM芯片封装在内存模块中，插到主板的扩展槽上\n\n--内存地址A取值过程：\n\n![6.1.1内存地址取值](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\6.1.1内存地址取值.PNG)\n\n\n\n（5）增强的DRAM\n\n快页模式DRAM、扩展数据输出DRAM、同步DRAM、双倍数据速率同步DRAM、视频RAM\n\n（6）非易失性存储器\n\nROM\n\n（7）访问主存\n\n总线：能够携带地址、数据和控制信号，分为：系统总线和内存总线\n\n###### 6.12磁盘存储\n\n磁盘读取时间计算：\n\n![磁盘读取时间计算](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\磁盘读取时间计算.PNG)\n\n#### 6.2局部性\n\n   (1)重复引用相同局部变量的程序具有良好的时间局部性\n\n（2）步长越小，空间局部性越好\n\n（3）对于取值指令，循环具有良好的时间和空间局部性，循环体越小，循环迭代次数越多，局部性越好\n\n#### 6.3存储器层次结构\n\n存储器层次结构\n\n![存储器层次结构](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\存储器层次结构.PNG)\n\n\n\n#### 6.4高速缓存存储器\n\n缓存不命中：\n\n- 冷不命中（强制性不命中）：\n\n  k层缓存有空行，程序最开始运行时均为冷不命中\n\n- 冲突不命中\n\n  k层中没有空行 \n\n- 容量不命中\n\n组相连高速缓存、组相连高速缓存、全相连高速缓存\n\n#### 6.5编写高速缓存存储器\n\n写命中：\n\n直写：高速缓存中更新的数据立即写回到低一层中\n\n写回：尽可能推迟更新，当替换算法要驱逐这个更新过的块时，才把它写到紧接着的低一层中\n\n写不命中：\n\n写分配：加载相应的低一层的块到高速缓存中，然后更新这个高速缓存块\n\n非写分配：避开高速缓存，直接把这个字写到低一层中\n\n**直写高速缓存通常时写分配的，写回高速缓存通常是非写分配的\n\n#### 6.6综合：高速缓存对程序性能的影响\n\n如果一个高速缓存的块大小为B字节，那么一个步长为k（字）的引用模式平均每次循环迭代会有min（1，（wordsize*k)/k））次缓存不命中\n\n### 八、异常控制流\n\n#### 8.1异常\n\n（1）异常是控制流中的突变，用来响应处理器状态中的变化。是异常控制流的一种形式，一部分由硬件实现，一部分由操作系统实现\n\n（2）事件处理：\n\n![8.1事件处理](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\8.1事件处理.PNG)\n\n（3）异常分类\n\n![异常分类](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\异常分类.PNG)\n\n![异常分类2](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\异常分类2.PNG)\n\n#### 8.2进程\n\n进程：一个执行中程序的实例。系统中每个程序都运行在某个进程的上下文中。上下文是由程序正确运行所需的状态组成\n\n进程提供的关键抽象：\n\n一个独立的逻辑控制流、一个私有的地址空间\n\n- 并发流：一个逻辑流的执行在时间上与另一个流重叠，称为并发流，这两个流被称为并发的运行。多个流并发地执行一般现象被称为并发。一个进程和其他进程轮流运行的概念称为多任务。一个进程执行它的控制流的一部分的每一时间段叫做时间片，因此，多任务也叫时间分片。\n\n- 如果两个流并发的运行在不同的处理器核或计算机上，那么我们称它们为并行流，它们并行地运行，且并行地执行\n\n- 进程地址空间\n\n  ![进程地址空间](C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\进程地址空间.PNG)\n\n- 用户模式和内核模式：进程从用户模式切换到内核模式的唯一方式是异常\n\n- 上下文切换：\n\n  1）保存当前进程的上下文；  2）恢复某个先前被抢占的进程被保存的上下文； 3）将控制传递给这个新恢复的进程\n\n#### 8.4进程控制\n\n- 进程的三种状态：\n\n运行：进程要么被执行，要么等待被执行且被内核调度\n\n停止：进程的执行被挂起，且不会被调度。当收到SIGSTOP 、SIGTSTP、SIGTTIN、SIGTOUT信号时，进程停止，并且保持到收到SIGCOUT信号\n\n终止：1）收到一个信号，该信号的默认行为是终止；2）从主程序返回；3）调用exit函数\n\n- 父进程和子进程最大的区别是PID不同。\n\nfork被调用一次，返回两次。一次是在父进程中，fork返回子进程的PID，一次是在新建的子进程中，返回0；\n\n- 子进程和父进程：\n\n  1）fork函数调用一次，返回两次；2）子进程和父进程并发运行；3）相同但是独立的地址空间；4）共享文件\n\n- pid_t wait_pid(int *statusp) : 如果成功，返回子进程的PID；如果WNOHANG，返回0；如果其他错误，返回-1\n\n- unsigned int sleep(unsigned int secs)：返回还要休眠的秒数\n\n- int pause(void)：总是返回-1，让函数休眠，直到该进程接收到另一个信号\n\n- execve:在当前进程的上下文中加载并运行一个新程序，从不返回，（如果找不到filename，才会返回到调用程序）。\n\n#### 8.5.5编写信号处理程序\n\n1、安全的信号处理\n\n（1）处理程序要尽可能的简单\n\n（2）在处理程序中只调用异步信号安全的函数\n\n（3）保存和恢复errno\n\n（4）阻塞所有信号，保护对共享数据结构的访问\n\n（5）用volatile声明全局变量\n\n（6）用sig_atomic_t声明标志\n\n2、正确的信号处理：未处理的信号不排队\n\n3、可移植的信号处理\n\n\n\n由于本人有一丢丢懒~，漏掉的一些内容懒得更新，排版也只是凑合，还请大家原谅啦啦-----\n\n","slug":"深入理解计算机系统","published":1,"updated":"2019-03-05T03:12:39.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsvd3u4p00048su3q8knf9rx","content":"<h2 id=\"深入理解计算机系统\"><a href=\"#深入理解计算机系统\" class=\"headerlink\" title=\"深入理解计算机系统\"></a>深入理解计算机系统</h2><ul>\n<li><p>计算机的字长，是指针数据的位长，表明了虚拟地址空间的大小</p>\n</li>\n<li><p>ASCII字符构成的文件成为文本文件，其他所有文件都称为二进制文件</p>\n</li>\n<li><p>核心PC模型由指令集架构决定，操作围绕主存、寄存器文件、算术/逻辑单元ALU进行，进行加载、存储、操作、跳转等操作。</p>\n</li>\n<li><p>存储器层次结构的基本思想：上一层的存储器作为第一层存储器的高速缓存</p>\n</li>\n<li><p>操作系统的基本功能：1：防止硬件被失控 的应用程序滥用；2：向应用程序提供简单一致的机制来控制复杂而通常大而不同的低级硬件设备。 </p>\n</li>\n</ul>\n<h3 id=\"二、信息的表示和处理\"><a href=\"#二、信息的表示和处理\" class=\"headerlink\" title=\"二、信息的表示和处理\"></a>二、信息的表示和处理</h3><h4 id=\"2-1信息存储\"><a href=\"#2-1信息存储\" class=\"headerlink\" title=\"2.1信息存储\"></a>2.1信息存储</h4><ul>\n<li>信息：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数值：值   小数点  符号（三要素）</span><br><span class=\"line\"></span><br><span class=\"line\">非数值：文字 图像 视频 语言</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>软件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统软件：（用来管理整个计算机系统）</span><br><span class=\"line\"></span><br><span class=\"line\">语言处理程序  操作系统  服务型程序 数据\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t库管理系统 网络软件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>计算机系统的层次结构：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>高级语言</th>\n<th>虚拟机器M3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>汇编语言</td>\n<td>虚拟机器M2</td>\n</tr>\n<tr>\n<td>操作系统</td>\n<td>虚拟机器</td>\n</tr>\n<tr>\n<td>机器语言</td>\n<td>实际机器M1</td>\n</tr>\n<tr>\n<td>微指令语言（时间)</td>\n<td>微程序机器M0</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>机器数（码）：原码 反码 移码  补码</p>\n</li>\n<li><p>数的逻辑：逻辑   算术（+ - * /） c语言中的数</p>\n</li>\n<li><p>逻辑运算符&amp;&amp;和||与对应的位级运算符&amp;和|第二个区别：</p>\n<p>如果对第一个参数求值就能确定表达式的结果，那么逻辑运算符就不会对第二个参数求值。例如：a&amp;&amp;5/a不会造成被零除，p&amp;&amp;*p++不会导致间接引用空指针 </p>\n</li>\n<li><p>集合的表示与运算</p>\n<ul>\n<li>表示：位向量表示有限集合</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eg：<span class=\"number\">10100110</span>   从右到左表示 该集合=&#123;<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">5</span>，<span class=\"number\">7</span>&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>运算：&amp; 交集     |  并集    ^  对称差集    ~  补集                  </p>\n</li>\n<li><p>左移补0，但右移分为逻辑右移和算术右移，逻辑右移左端补0，算术右移左端补最高有效位的值。c语言对此没有区分，但大多数编译器对有符号数使用算术右移；无符号数右移必须是逻辑的 。Java对右移有明确的规定，x&gt;&gt;k表示x算术右移k个位置，x&gt;&gt;&gt;k表示逻辑右移</p>\n</li>\n</ul>\n<h4 id=\"2-2整数表示\"><a href=\"#2-2整数表示\" class=\"headerlink\" title=\"2.2整数表示\"></a>2.2整数表示</h4><h5 id=\"1-整数编码\"><a href=\"#1-整数编码\" class=\"headerlink\" title=\"1)整数编码\"></a>1)整数编码</h5><p>有符号数：补码</p>\n<p>B2T(X) = $-X_{w-1}2^{w-1}+\\sum_{i=0}^{w-2}X_i2_i$</p>\n<p>例：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>10进制</th>\n<th>16进制</th>\n<th>2进制</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>X</td>\n<td>15213</td>\n<td>3B 6D</td>\n<td>0011011 01101101</td>\n</tr>\n<tr>\n<td>Y</td>\n<td>-15213</td>\n<td>C4 93</td>\n<td>1100100 10010011(最高位1表示负数)</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>原码</th>\n<th>反码</th>\n<th>补码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>11</td>\n<td>0000 1011</td>\n<td>0000 1011</td>\n<td>0000 1011</td>\n</tr>\n<tr>\n<td>-11</td>\n<td>1000  1011</td>\n<td>1111 0100</td>\n<td>1111 0101</td>\n</tr>\n</tbody>\n</table>\n<p>注:负数的补码为反码加1,  正数的 原码、反码、补码都相同</p>\n<h5 id=\"2-知识细节\"><a href=\"#2-知识细节\" class=\"headerlink\" title=\"2)知识细节\"></a>2)知识细节</h5><ul>\n<li><p>有符号数同一表示形式下，负数的表示范围 比正数的范围大1  </p>\n<p>同一位数：补码的范围不对称，|TMin|=|TMax|+1；                                                                                                                                  同一位数：最大的无符号数比有符号数的两倍多1，即：UMax = 2TMax + 1​                </p>\n</li>\n<li><p>对于大多数C语言，处理同样字长的有符号数和无符号数规则：数值可能改变，但位模式不变</p>\n</li>\n</ul>\n<p>​    eg：short v = -12345;    unsigned short  uv = (unsigned short) v;     uv=53191  这里-12345的16位补码和53191的16位编码相同</p>\n<p>​    无符号数和有符号数之间的转换规则：T–&gt;U:补码转化为无符号数       U–&gt;T:无符号数转化为补码</p>\n<p>​    参与运算时，如果有无符号数出现在同一表达式，则有符号数强制转化为无符号数​                                                      </p>\n<ul>\n<li><p>扩展一个数字的位表示：无符号数零扩展，补码数(有符号数)符号扩展​                                                        </p>\n</li>\n<li><p>截断无符号数：丢弃高位取地位；  截断有符号数：截断后将最高位转化为符号位​                                                    </p>\n</li>\n</ul>\n<h4 id=\"2-3整数运算\"><a href=\"#2-3整数运算\" class=\"headerlink\" title=\"2.3整数运算\"></a>2.3整数运算</h4><h5 id=\"1-有符号数和无符号数转换的基本原则：\"><a href=\"#1-有符号数和无符号数转换的基本原则：\" class=\"headerlink\" title=\"1)有符号数和无符号数转换的基本原则：\"></a>1)有符号数和无符号数转换的基本原则：</h5><figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"ruby\">位模式不变</span></span><br><span class=\"line\"><span class=\"ruby\"></span></span><br><span class=\"line\"><span class=\"ruby\">-重新解读（按目标编码类型的规则解读）</span></span><br><span class=\"line\"><span class=\"ruby\"></span></span><br><span class=\"line\"><span class=\"ruby\">-会有意外的副作用：数值被 + 或 -$2^w$</span></span><br><span class=\"line\"><span class=\"ruby\"></span></span><br><span class=\"line\"><span class=\"ruby\">-当表达式中有符号数和无符号数混合时，有符号数转化为无符号数</span></span><br></pre></td></tr></table></figure>\n<p>加法:    无/有符号数的加法：正常加法后再截断，位级的运算相同</p>\n<p>​        无符号数：加后对$2^w$求模</p>\n<h5 id=\"2-符号位扩展\"><a href=\"#2-符号位扩展\" class=\"headerlink\" title=\"2)符号位扩展\"></a>2)符号位扩展</h5><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-无符号数：填充<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">-有符号位：符号扩展</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\teg：<span class=\"number\">-15213</span>    二进制：<span class=\"number\">11000100</span> <span class=\"number\">10010011</span>  ---&gt; <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11000100</span> <span class=\"number\">10010011</span></span><br><span class=\"line\"></span><br><span class=\"line\">-结果都是明确的预期值</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-截断\"><a href=\"#3-截断\" class=\"headerlink\" title=\"3)截断\"></a>3)截断</h5><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">-无论有无符号数，多出的位数都被截断</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-结果重新解读</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-无符号数: 相当于求模运算</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-有符号数：和求模运算相似</span></span><br></pre></td></tr></table></figure>\n<p>​    -对于小整数，结果是明确的预期值</p>\n<h5 id=\"4-检测无符号数加法中的溢出：\"><a href=\"#4-检测无符号数加法中的溢出：\" class=\"headerlink\" title=\"4)检测无符号数加法中的溢出：\"></a>4)检测无符号数加法中的溢出：</h5><p>​    s =x+y,当且仅当s &lt; x(或等价的s &lt; y)时发生了溢出</p>\n<p>​    无符号数逆元（求反）：x=0时：-x=0</p>\n<p>​                   x &gt; 0时: -x = $2^w$</p>\n<h5 id=\"5-补码加法：\"><a href=\"#5-补码加法：\" class=\"headerlink\" title=\"5)补码加法：\"></a>5)补码加法：</h5><p>对于-$2^{w-1}\\le,y\\le2^{w-1}$-1的整数x和y，有<br>$$<br>\\begin{equation}x+^t_wy=\\begin{cases}x+y-2^w&amp; 2^{w-1}\\le{x+y} &amp; 正溢出\\x+y &amp; -2^{w-1}\\le{x+y}&lt;2^{w-1} &amp; 正常\\x+y+2^w &amp; x+y&lt;-2^{w-1} &amp; 负溢出\\end{cases}\\end{equation}<br>$$<br>​     对于满足TMi$n_w\\le$x,y$\\le$TMax$_w$的和y，令s=x+y,当且仅当x &gt; 0,y &gt; 0但s$\\le$0时发生了正溢出；当且仅当x &lt; 0,y &lt; 0但s$\\geq$0时发生了正溢出  </p>\n<h5 id=\"6-补码的非\"><a href=\"#6-补码的非\" class=\"headerlink\" title=\"6)补码的非\"></a>6)补码的非</h5><p>对满足$TMin_w\\le x\\le TMax_w$    的$x$，其补码的非$-^t_wx$由下式给出：<br>$$<br>\\begin{equation}-^t_wx=\\begin{cases}TMin_w&amp; x = TMin_w\\-x &amp; x&gt;TMin_w\\end{cases}\\end{equation}<br>$$<br>也就是说，对w位的补码加法来说，$TMin_w$是自己的加法的逆，而对其他的都有$-x$作为其加法的逆</p>\n<h5 id=\"7）补码非的位级表示\"><a href=\"#7）补码非的位级表示\" class=\"headerlink\" title=\"7）补码非的位级表示\"></a>7）补码非的位级表示</h5><p>​    方法一：对每一位求补，再对结果加1</p>\n<p>​    方法二：找到最右边的第一个1的位置，然后将该位置左边的所有为取反</p>\n<h4 id=\"2-4浮点数\"><a href=\"#2-4浮点数\" class=\"headerlink\" title=\"2.4浮点数\"></a>2.4浮点数</h4><ul>\n<li>IEEE标准：</li>\n</ul>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数标准分类.PNG\" alt=\"浮点数标准分类\"></p>\n<ul>\n<li>浮点数规格化的值（frac、exp）</li>\n</ul>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数规格化的值.PNG\" alt=\"浮点数规格化的值\"></p>\n<ul>\n<li><p>对于非规格化值：E=1-Bisas，M=f，不包括隐含的开头的1 <img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数规格化的值.PNG\" alt=\"浮点数规格化的值\"> </p>\n</li>\n<li><p>舍入</p>\n</li>\n</ul>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数舍入.PNG\" alt=\"浮点数舍入\"></p>\n<p>​    将float或double转化成int，值将向零舍入                    </p>\n<h3 id=\"三、程序的机器级表示\"><a href=\"#三、程序的机器级表示\" class=\"headerlink\" title=\"三、程序的机器级表示\"></a>三、程序的机器级表示</h3><h4 id=\"3-3数据格式\"><a href=\"#3-3数据格式\" class=\"headerlink\" title=\"3.3数据格式\"></a>3.3数据格式</h4><p>c数据类型的宽度</p>\n<table>\n<thead>\n<tr>\n<th>c数据类型</th>\n<th>32位</th>\n<th>64位</th>\n<th>x86-64</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4</td>\n<td>4</td>\n<td>4</td>\n</tr>\n<tr>\n<td>long</td>\n<td>4</td>\n<td>8</td>\n<td>8</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4</td>\n<td>4</td>\n<td>4</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>8</td>\n<td>8</td>\n</tr>\n<tr>\n<td>long double</td>\n<td>-</td>\n<td>-</td>\n<td>10/16</td>\n</tr>\n<tr>\n<td>pointer</td>\n<td>4</td>\n<td>8</td>\n<td>8</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-4访问信息\"><a href=\"#3-4访问信息\" class=\"headerlink\" title=\"3.4访问信息\"></a>3.4访问信息</h4><ul>\n<li><p>常规的movq指令只能以表示为32位补码数字的立即数作为源操作数，然后把这个值符号扩展到64位的值放大目的位置；</p>\n</li>\n<li><p>MOVZ类中的指令把目的中剩余的字节填充为0，而MOVS类中的指令通过符号扩展来填充，把源操作数的最高位进行复制。</p>\n</li>\n</ul>\n<p>​    MOVZ类（零扩展）的指令：以寄存器或地址内存作为源，以寄存器作为目的；</p>\n<p>​    MOVS类（符号扩展）的指令：以寄存器或地址内存作为源，以寄存器作为目的；cltq指令无操作数：只作用于%eax和%rax</p>\n<h4 id=\"3-5算术和逻辑操作\"><a href=\"#3-5算术和逻辑操作\" class=\"headerlink\" title=\"3.5算术和逻辑操作\"></a>3.5算术和逻辑操作</h4><p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\算术和逻辑操作指令.PNG\" alt=\"算术和逻辑操作指令\"></p>\n<p>（1）leap指令目的操作数必须是寄存器</p>\n<p>（2）左移指令有两个：SAL和SHL，两者效果一样，都是右边补0；右移指令不同，SAR执行算术移位，补充符号位，而SHR执行逻辑移位，补充0</p>\n<p>（3）特殊的算术操作</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\特殊的操作指令.PNG\" alt=\"特殊的操作指令\"></p>\n<p>有符号除法指令 idivl 将%rdx高64位和%rax低64位中的128位作为被除数，而除数作为指令的操作数给出。指令将商存储在%rax，余数存储在%rdx</p>\n<p>cqto指令可以不需要操作数，隐含读出%rax的符号位并将其复制到%rdx的每一位</p>\n<h4 id=\"3-6控制\"><a href=\"#3-6控制\" class=\"headerlink\" title=\"3.6控制\"></a>3.6控制</h4><p>（1）leaq指令不改变条件码</p>\n<p>（2）CMP指令和TEST指令只改变条件码，前者基于sub，后者基于and</p>\n<p>（3）条件码通常不会直接读取，常用使用方法：</p>\n<p>​    a、根据条件码的某种组合将一个字节设置为0或1（即set指令）</p>\n<p>​    b、条件跳转到程序的某个其他部分</p>\n<p>​    c、有条件的传送数据</p>\n<p>（4）set指令：</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\set指令.PNG\" alt=\"set指令\"></p>\n<h4 id=\"3-7过程\"><a href=\"#3-7过程\" class=\"headerlink\" title=\"3.7过程\"></a>3.7过程</h4><p> （1）传递控制、传递数据、分配和释放内存</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\栈结构.PNG\" alt=\"栈结构\"></p>\n<p>（2）调用函数前，把所有的参数都先存储，包括形参，存储完毕才开始调用函数</p>\n<p>（3）栈上的局部变量（局部数据必须用主存的情况)</p>\n<p>​    1）寄存器不足够存放所有的本地数据</p>\n<p>​    2）对一个局部变量使用取址符&amp;，因此必须为其产生一个地址</p>\n<p>​    3）某些局部变量是数组或结构，因此必须通过数组或结构引用访问到。</p>\n<p>注：寄存器是唯一被所有过程共享的资源</p>\n<h4 id=\"3-10对抗缓冲区溢出\"><a href=\"#3-10对抗缓冲区溢出\" class=\"headerlink\" title=\"3.10对抗缓冲区溢出\"></a>3.10对抗缓冲区溢出</h4><p>方法：1、栈随机化 ；2、栈破坏检测 ；3、限制可执行代码区域</p>\n<h4 id=\"3-11过程中的浮点代码\"><a href=\"#3-11过程中的浮点代码\" class=\"headerlink\" title=\"3.11过程中的浮点代码\"></a>3.11过程中的浮点代码</h4><ul>\n<li><p>XMM寄存器8xmn0~ 8xmm7最多可以传递8个浮点参数。按照参数列出的顺序使用这些寄存器。可以通过栈传递额外的浮点参数。</p>\n</li>\n<li><p>函数使用寄存器%xmm0来返回浮点值。</p>\n</li>\n<li><p>所有的XMM寄存器都是调用者保存的。被调用者可以不用保存就覆盖这些寄存器<br>中任意一个。</p>\n<p>| 单精度 | 双精度 | 效果   | 描述                    |<br>| —— | —— | —— | ———————– |<br>| vxorps | vorpd  | D&lt;-x*y | 位级异或（EXCLUSIVE-OR) |<br>| vandps | andpd  | D&lt;-x&amp;y | 位级与（AND）           |</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>基于</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ucomiss x,y</td>\n<td>y-x</td>\n<td>比较单精度值</td>\n</tr>\n<tr>\n<td>ucomisd x,y</td>\n<td>y-x</td>\n<td>比较双精度值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"四、处理器体系结构\"><a href=\"#四、处理器体系结构\" class=\"headerlink\" title=\"四、处理器体系结构\"></a>四、处理器体系结构</h3><p>1、程序计数器PC保存当前正在执行指令的地址</p>\n<p>2、内存从概念上来说就是一个很大的字节数组，保存着程序和数据。Y86-64程序用虚拟地址来引用内存位置。硬件和操作系统软件联合起来将虚拟地址翻译成实际或物理地址</p>\n<p>3、Y86-64每条指令需要1~10个字节不等，每条指令的第一个字节表明指令的类型，这个字节分为两部分，每部分4位：高四位是代码部分，低四位是指令部分。功能值只有在一组相关指令共用一个代码时才有用。</p>\n<p>4、指令集的一个重要性质就是每个字节编码必须有唯一的解释</p>\n<p>5、时钟寄存器：存储单个字：PC、条件代码和程序状态Stat                                                                                                                  随机访问存储器：存储多个字</p>\n<p>6、指令处理：</p>\n<p>取指、译码、执行、访存、写回、更新PC</p>\n<p>7、SEQ的实现包括组合逻辑和两种存储设备：时钟寄存器和随机访问寄存器。四个硬件单元对时序控制：程序计数器、条件码寄存器、数据内存和寄存器文件，通过时钟信号控制。</p>\n<p>8、组织原则：从不读回，即处理器从来不需要为了完成一条指令的执行而去读由该指令更新了的状态。</p>\n<p>9、每个周期开始前，状态单元（PC、条件码、数据内存、寄存器文件）是根据前一条指令设置的。信号传播通过组合逻辑，创建出新的状态单元的值。</p>\n<h3 id=\"五、优化程序性能\"><a href=\"#五、优化程序性能\" class=\"headerlink\" title=\"五、优化程序性能\"></a>五、优化程序性能</h3><ul>\n<li><p>程序性能标准：每元素的周期数CPE</p>\n</li>\n<li><p>优化方法：</p>\n<p>1、消除循环低效率：代码移动：</p>\n<p>2、减少过程调用</p>\n<p>3、消除不必要的内存引用</p>\n<p>4、循环展开：减少迭代次数</p>\n<p>5、提高并行性：多个累计变量并行求、重新结合变换</p>\n</li>\n<li><p>课本总结：</p>\n<p>1）高级设计：算法和数据结构</p>\n<p>2）基本编码原则：</p>\n<ul>\n<li><p>消除连续的函数调用：将计算移动到循环外</p>\n</li>\n<li><p>消除不必要的内存引用：引用临时变量保存中间结果，最后结果得出才放入数组或全局变量</p>\n</li>\n</ul>\n<p>3）低级优化：</p>\n<ul>\n<li><p>展开循环，降低开销，并且使进一步优化成为可能</p>\n</li>\n<li><p>通过使用例如多个累积变量和重新结合等技术，提高指令集并行</p>\n</li>\n<li><p>用功能性的风格重写条件操作，使得编译采用条件数据传送</p>\n</li>\n</ul>\n</li>\n<li><p>限制因素：</p>\n<p>1、寄存器溢出</p>\n<p>2、分支预测错误和预测错误处罚：不过分关心可预测的分支、书写适合条件传送的代码</p>\n</li>\n</ul>\n<h3 id=\"六、存储器层次结构\"><a href=\"#六、存储器层次结构\" class=\"headerlink\" title=\"六、存储器层次结构\"></a>六、存储器层次结构</h3><h4 id=\"6-1存储技术\"><a href=\"#6-1存储技术\" class=\"headerlink\" title=\"6.1存储技术\"></a>6.1存储技术</h4><h6 id=\"6-1-1随机访问存储器\"><a href=\"#6-1-1随机访问存储器\" class=\"headerlink\" title=\"6.1.1随机访问存储器\"></a>6.1.1随机访问存储器</h6><p>随机访问存储器分（RAM）为两类：静态SRAM（更快）和动态DRAM</p>\n<p>（1）静态（SRAM）</p>\n<p>SRAM将每个位存储在一个双稳态的存储器单元，每个单元由一个六晶体管电路实现，可无限期保持在两个不同的电压配置或状态之一</p>\n<p>（2）动态（DRAM）</p>\n<p>DRAM将每个位存储为对一个电容的充电，对干扰敏感且不能恢复</p>\n<p>对比：</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\SRAM和DRAM对比.PNG\" alt=\"SRAM和DRAM对比\"></p>\n<p>（3）传统的DRAM</p>\n<p>DRAM芯片中的单元（位）被分成d个超单元，每个超单元由w个DRAM单元组成，一个d*w的DRAM存储了dw位信息。超单元被组织成r行c列的矩阵，rc=d。</p>\n<p>每个超单元存储一个字节</p>\n<p>(4)内存模块</p>\n<p>–DRAM芯片封装在内存模块中，插到主板的扩展槽上</p>\n<p>–内存地址A取值过程：</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\6.1.1内存地址取值.PNG\" alt=\"6.1.1内存地址取值\"></p>\n<p>（5）增强的DRAM</p>\n<p>快页模式DRAM、扩展数据输出DRAM、同步DRAM、双倍数据速率同步DRAM、视频RAM</p>\n<p>（6）非易失性存储器</p>\n<p>ROM</p>\n<p>（7）访问主存</p>\n<p>总线：能够携带地址、数据和控制信号，分为：系统总线和内存总线</p>\n<h6 id=\"6-12磁盘存储\"><a href=\"#6-12磁盘存储\" class=\"headerlink\" title=\"6.12磁盘存储\"></a>6.12磁盘存储</h6><p>磁盘读取时间计算：</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\磁盘读取时间计算.PNG\" alt=\"磁盘读取时间计算\"></p>\n<h4 id=\"6-2局部性\"><a href=\"#6-2局部性\" class=\"headerlink\" title=\"6.2局部性\"></a>6.2局部性</h4><p>   (1)重复引用相同局部变量的程序具有良好的时间局部性</p>\n<p>（2）步长越小，空间局部性越好</p>\n<p>（3）对于取值指令，循环具有良好的时间和空间局部性，循环体越小，循环迭代次数越多，局部性越好</p>\n<h4 id=\"6-3存储器层次结构\"><a href=\"#6-3存储器层次结构\" class=\"headerlink\" title=\"6.3存储器层次结构\"></a>6.3存储器层次结构</h4><p>存储器层次结构</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\存储器层次结构.PNG\" alt=\"存储器层次结构\"></p>\n<h4 id=\"6-4高速缓存存储器\"><a href=\"#6-4高速缓存存储器\" class=\"headerlink\" title=\"6.4高速缓存存储器\"></a>6.4高速缓存存储器</h4><p>缓存不命中：</p>\n<ul>\n<li><p>冷不命中（强制性不命中）：</p>\n<p>k层缓存有空行，程序最开始运行时均为冷不命中</p>\n</li>\n<li><p>冲突不命中</p>\n<p>k层中没有空行 </p>\n</li>\n<li><p>容量不命中</p>\n</li>\n</ul>\n<p>组相连高速缓存、组相连高速缓存、全相连高速缓存</p>\n<h4 id=\"6-5编写高速缓存存储器\"><a href=\"#6-5编写高速缓存存储器\" class=\"headerlink\" title=\"6.5编写高速缓存存储器\"></a>6.5编写高速缓存存储器</h4><p>写命中：</p>\n<p>直写：高速缓存中更新的数据立即写回到低一层中</p>\n<p>写回：尽可能推迟更新，当替换算法要驱逐这个更新过的块时，才把它写到紧接着的低一层中</p>\n<p>写不命中：</p>\n<p>写分配：加载相应的低一层的块到高速缓存中，然后更新这个高速缓存块</p>\n<p>非写分配：避开高速缓存，直接把这个字写到低一层中</p>\n<p>**直写高速缓存通常时写分配的，写回高速缓存通常是非写分配的</p>\n<h4 id=\"6-6综合：高速缓存对程序性能的影响\"><a href=\"#6-6综合：高速缓存对程序性能的影响\" class=\"headerlink\" title=\"6.6综合：高速缓存对程序性能的影响\"></a>6.6综合：高速缓存对程序性能的影响</h4><p>如果一个高速缓存的块大小为B字节，那么一个步长为k（字）的引用模式平均每次循环迭代会有min（1，（wordsize*k)/k））次缓存不命中</p>\n<h3 id=\"八、异常控制流\"><a href=\"#八、异常控制流\" class=\"headerlink\" title=\"八、异常控制流\"></a>八、异常控制流</h3><h4 id=\"8-1异常\"><a href=\"#8-1异常\" class=\"headerlink\" title=\"8.1异常\"></a>8.1异常</h4><p>（1）异常是控制流中的突变，用来响应处理器状态中的变化。是异常控制流的一种形式，一部分由硬件实现，一部分由操作系统实现</p>\n<p>（2）事件处理：</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\8.1事件处理.PNG\" alt=\"8.1事件处理\"></p>\n<p>（3）异常分类</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\异常分类.PNG\" alt=\"异常分类\"></p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\异常分类2.PNG\" alt=\"异常分类2\"></p>\n<h4 id=\"8-2进程\"><a href=\"#8-2进程\" class=\"headerlink\" title=\"8.2进程\"></a>8.2进程</h4><p>进程：一个执行中程序的实例。系统中每个程序都运行在某个进程的上下文中。上下文是由程序正确运行所需的状态组成</p>\n<p>进程提供的关键抽象：</p>\n<p>一个独立的逻辑控制流、一个私有的地址空间</p>\n<ul>\n<li><p>并发流：一个逻辑流的执行在时间上与另一个流重叠，称为并发流，这两个流被称为并发的运行。多个流并发地执行一般现象被称为并发。一个进程和其他进程轮流运行的概念称为多任务。一个进程执行它的控制流的一部分的每一时间段叫做时间片，因此，多任务也叫时间分片。</p>\n</li>\n<li><p>如果两个流并发的运行在不同的处理器核或计算机上，那么我们称它们为并行流，它们并行地运行，且并行地执行</p>\n</li>\n<li><p>进程地址空间</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\进程地址空间.PNG\" alt=\"进程地址空间\"></p>\n</li>\n<li><p>用户模式和内核模式：进程从用户模式切换到内核模式的唯一方式是异常</p>\n</li>\n<li><p>上下文切换：</p>\n<p>1）保存当前进程的上下文；  2）恢复某个先前被抢占的进程被保存的上下文； 3）将控制传递给这个新恢复的进程</p>\n</li>\n</ul>\n<h4 id=\"8-4进程控制\"><a href=\"#8-4进程控制\" class=\"headerlink\" title=\"8.4进程控制\"></a>8.4进程控制</h4><ul>\n<li>进程的三种状态：</li>\n</ul>\n<p>运行：进程要么被执行，要么等待被执行且被内核调度</p>\n<p>停止：进程的执行被挂起，且不会被调度。当收到SIGSTOP 、SIGTSTP、SIGTTIN、SIGTOUT信号时，进程停止，并且保持到收到SIGCOUT信号</p>\n<p>终止：1）收到一个信号，该信号的默认行为是终止；2）从主程序返回；3）调用exit函数</p>\n<ul>\n<li>父进程和子进程最大的区别是PID不同。</li>\n</ul>\n<p>fork被调用一次，返回两次。一次是在父进程中，fork返回子进程的PID，一次是在新建的子进程中，返回0；</p>\n<ul>\n<li><p>子进程和父进程：</p>\n<p>1）fork函数调用一次，返回两次；2）子进程和父进程并发运行；3）相同但是独立的地址空间；4）共享文件</p>\n</li>\n<li><p>pid_t wait_pid(int *statusp) : 如果成功，返回子进程的PID；如果WNOHANG，返回0；如果其他错误，返回-1</p>\n</li>\n<li><p>unsigned int sleep(unsigned int secs)：返回还要休眠的秒数</p>\n</li>\n<li><p>int pause(void)：总是返回-1，让函数休眠，直到该进程接收到另一个信号</p>\n</li>\n<li><p>execve:在当前进程的上下文中加载并运行一个新程序，从不返回，（如果找不到filename，才会返回到调用程序）。</p>\n</li>\n</ul>\n<h4 id=\"8-5-5编写信号处理程序\"><a href=\"#8-5-5编写信号处理程序\" class=\"headerlink\" title=\"8.5.5编写信号处理程序\"></a>8.5.5编写信号处理程序</h4><p>1、安全的信号处理</p>\n<p>（1）处理程序要尽可能的简单</p>\n<p>（2）在处理程序中只调用异步信号安全的函数</p>\n<p>（3）保存和恢复errno</p>\n<p>（4）阻塞所有信号，保护对共享数据结构的访问</p>\n<p>（5）用volatile声明全局变量</p>\n<p>（6）用sig_atomic_t声明标志</p>\n<p>2、正确的信号处理：未处理的信号不排队</p>\n<p>3、可移植的信号处理</p>\n<p>由于本人有一丢丢懒~，漏掉的一些内容懒得更新，排版也只是凑合，还请大家原谅啦啦—–</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"深入理解计算机系统\"><a href=\"#深入理解计算机系统\" class=\"headerlink\" title=\"深入理解计算机系统\"></a>深入理解计算机系统</h2><ul>\n<li><p>计算机的字长，是指针数据的位长，表明了虚拟地址空间的大小</p>\n</li>\n<li><p>ASCII字符构成的文件成为文本文件，其他所有文件都称为二进制文件</p>\n</li>\n<li><p>核心PC模型由指令集架构决定，操作围绕主存、寄存器文件、算术/逻辑单元ALU进行，进行加载、存储、操作、跳转等操作。</p>\n</li>\n<li><p>存储器层次结构的基本思想：上一层的存储器作为第一层存储器的高速缓存</p>\n</li>\n<li><p>操作系统的基本功能：1：防止硬件被失控 的应用程序滥用；2：向应用程序提供简单一致的机制来控制复杂而通常大而不同的低级硬件设备。 </p>\n</li>\n</ul>\n<h3 id=\"二、信息的表示和处理\"><a href=\"#二、信息的表示和处理\" class=\"headerlink\" title=\"二、信息的表示和处理\"></a>二、信息的表示和处理</h3><h4 id=\"2-1信息存储\"><a href=\"#2-1信息存储\" class=\"headerlink\" title=\"2.1信息存储\"></a>2.1信息存储</h4><ul>\n<li>信息：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数值：值   小数点  符号（三要素）</span><br><span class=\"line\"></span><br><span class=\"line\">非数值：文字 图像 视频 语言</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>软件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统软件：（用来管理整个计算机系统）</span><br><span class=\"line\"></span><br><span class=\"line\">语言处理程序  操作系统  服务型程序 数据\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t库管理系统 网络软件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>计算机系统的层次结构：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>高级语言</th>\n<th>虚拟机器M3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>汇编语言</td>\n<td>虚拟机器M2</td>\n</tr>\n<tr>\n<td>操作系统</td>\n<td>虚拟机器</td>\n</tr>\n<tr>\n<td>机器语言</td>\n<td>实际机器M1</td>\n</tr>\n<tr>\n<td>微指令语言（时间)</td>\n<td>微程序机器M0</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>机器数（码）：原码 反码 移码  补码</p>\n</li>\n<li><p>数的逻辑：逻辑   算术（+ - * /） c语言中的数</p>\n</li>\n<li><p>逻辑运算符&amp;&amp;和||与对应的位级运算符&amp;和|第二个区别：</p>\n<p>如果对第一个参数求值就能确定表达式的结果，那么逻辑运算符就不会对第二个参数求值。例如：a&amp;&amp;5/a不会造成被零除，p&amp;&amp;*p++不会导致间接引用空指针 </p>\n</li>\n<li><p>集合的表示与运算</p>\n<ul>\n<li>表示：位向量表示有限集合</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eg：<span class=\"number\">10100110</span>   从右到左表示 该集合=&#123;<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">5</span>，<span class=\"number\">7</span>&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>运算：&amp; 交集     |  并集    ^  对称差集    ~  补集                  </p>\n</li>\n<li><p>左移补0，但右移分为逻辑右移和算术右移，逻辑右移左端补0，算术右移左端补最高有效位的值。c语言对此没有区分，但大多数编译器对有符号数使用算术右移；无符号数右移必须是逻辑的 。Java对右移有明确的规定，x&gt;&gt;k表示x算术右移k个位置，x&gt;&gt;&gt;k表示逻辑右移</p>\n</li>\n</ul>\n<h4 id=\"2-2整数表示\"><a href=\"#2-2整数表示\" class=\"headerlink\" title=\"2.2整数表示\"></a>2.2整数表示</h4><h5 id=\"1-整数编码\"><a href=\"#1-整数编码\" class=\"headerlink\" title=\"1)整数编码\"></a>1)整数编码</h5><p>有符号数：补码</p>\n<p>B2T(X) = $-X_{w-1}2^{w-1}+\\sum_{i=0}^{w-2}X_i2_i$</p>\n<p>例：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>10进制</th>\n<th>16进制</th>\n<th>2进制</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>X</td>\n<td>15213</td>\n<td>3B 6D</td>\n<td>0011011 01101101</td>\n</tr>\n<tr>\n<td>Y</td>\n<td>-15213</td>\n<td>C4 93</td>\n<td>1100100 10010011(最高位1表示负数)</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>原码</th>\n<th>反码</th>\n<th>补码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>11</td>\n<td>0000 1011</td>\n<td>0000 1011</td>\n<td>0000 1011</td>\n</tr>\n<tr>\n<td>-11</td>\n<td>1000  1011</td>\n<td>1111 0100</td>\n<td>1111 0101</td>\n</tr>\n</tbody>\n</table>\n<p>注:负数的补码为反码加1,  正数的 原码、反码、补码都相同</p>\n<h5 id=\"2-知识细节\"><a href=\"#2-知识细节\" class=\"headerlink\" title=\"2)知识细节\"></a>2)知识细节</h5><ul>\n<li><p>有符号数同一表示形式下，负数的表示范围 比正数的范围大1  </p>\n<p>同一位数：补码的范围不对称，|TMin|=|TMax|+1；                                                                                                                                  同一位数：最大的无符号数比有符号数的两倍多1，即：UMax = 2TMax + 1​                </p>\n</li>\n<li><p>对于大多数C语言，处理同样字长的有符号数和无符号数规则：数值可能改变，但位模式不变</p>\n</li>\n</ul>\n<p>​    eg：short v = -12345;    unsigned short  uv = (unsigned short) v;     uv=53191  这里-12345的16位补码和53191的16位编码相同</p>\n<p>​    无符号数和有符号数之间的转换规则：T–&gt;U:补码转化为无符号数       U–&gt;T:无符号数转化为补码</p>\n<p>​    参与运算时，如果有无符号数出现在同一表达式，则有符号数强制转化为无符号数​                                                      </p>\n<ul>\n<li><p>扩展一个数字的位表示：无符号数零扩展，补码数(有符号数)符号扩展​                                                        </p>\n</li>\n<li><p>截断无符号数：丢弃高位取地位；  截断有符号数：截断后将最高位转化为符号位​                                                    </p>\n</li>\n</ul>\n<h4 id=\"2-3整数运算\"><a href=\"#2-3整数运算\" class=\"headerlink\" title=\"2.3整数运算\"></a>2.3整数运算</h4><h5 id=\"1-有符号数和无符号数转换的基本原则：\"><a href=\"#1-有符号数和无符号数转换的基本原则：\" class=\"headerlink\" title=\"1)有符号数和无符号数转换的基本原则：\"></a>1)有符号数和无符号数转换的基本原则：</h5><figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"ruby\">位模式不变</span></span><br><span class=\"line\"><span class=\"ruby\"></span></span><br><span class=\"line\"><span class=\"ruby\">-重新解读（按目标编码类型的规则解读）</span></span><br><span class=\"line\"><span class=\"ruby\"></span></span><br><span class=\"line\"><span class=\"ruby\">-会有意外的副作用：数值被 + 或 -$2^w$</span></span><br><span class=\"line\"><span class=\"ruby\"></span></span><br><span class=\"line\"><span class=\"ruby\">-当表达式中有符号数和无符号数混合时，有符号数转化为无符号数</span></span><br></pre></td></tr></table></figure>\n<p>加法:    无/有符号数的加法：正常加法后再截断，位级的运算相同</p>\n<p>​        无符号数：加后对$2^w$求模</p>\n<h5 id=\"2-符号位扩展\"><a href=\"#2-符号位扩展\" class=\"headerlink\" title=\"2)符号位扩展\"></a>2)符号位扩展</h5><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-无符号数：填充<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">-有符号位：符号扩展</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\teg：<span class=\"number\">-15213</span>    二进制：<span class=\"number\">11000100</span> <span class=\"number\">10010011</span>  ---&gt; <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11000100</span> <span class=\"number\">10010011</span></span><br><span class=\"line\"></span><br><span class=\"line\">-结果都是明确的预期值</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-截断\"><a href=\"#3-截断\" class=\"headerlink\" title=\"3)截断\"></a>3)截断</h5><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">-无论有无符号数，多出的位数都被截断</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-结果重新解读</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-无符号数: 相当于求模运算</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-有符号数：和求模运算相似</span></span><br></pre></td></tr></table></figure>\n<p>​    -对于小整数，结果是明确的预期值</p>\n<h5 id=\"4-检测无符号数加法中的溢出：\"><a href=\"#4-检测无符号数加法中的溢出：\" class=\"headerlink\" title=\"4)检测无符号数加法中的溢出：\"></a>4)检测无符号数加法中的溢出：</h5><p>​    s =x+y,当且仅当s &lt; x(或等价的s &lt; y)时发生了溢出</p>\n<p>​    无符号数逆元（求反）：x=0时：-x=0</p>\n<p>​                   x &gt; 0时: -x = $2^w$</p>\n<h5 id=\"5-补码加法：\"><a href=\"#5-补码加法：\" class=\"headerlink\" title=\"5)补码加法：\"></a>5)补码加法：</h5><p>对于-$2^{w-1}\\le,y\\le2^{w-1}$-1的整数x和y，有<br>$$<br>\\begin{equation}x+^t_wy=\\begin{cases}x+y-2^w&amp; 2^{w-1}\\le{x+y} &amp; 正溢出\\x+y &amp; -2^{w-1}\\le{x+y}&lt;2^{w-1} &amp; 正常\\x+y+2^w &amp; x+y&lt;-2^{w-1} &amp; 负溢出\\end{cases}\\end{equation}<br>$$<br>​     对于满足TMi$n_w\\le$x,y$\\le$TMax$_w$的和y，令s=x+y,当且仅当x &gt; 0,y &gt; 0但s$\\le$0时发生了正溢出；当且仅当x &lt; 0,y &lt; 0但s$\\geq$0时发生了正溢出  </p>\n<h5 id=\"6-补码的非\"><a href=\"#6-补码的非\" class=\"headerlink\" title=\"6)补码的非\"></a>6)补码的非</h5><p>对满足$TMin_w\\le x\\le TMax_w$    的$x$，其补码的非$-^t_wx$由下式给出：<br>$$<br>\\begin{equation}-^t_wx=\\begin{cases}TMin_w&amp; x = TMin_w\\-x &amp; x&gt;TMin_w\\end{cases}\\end{equation}<br>$$<br>也就是说，对w位的补码加法来说，$TMin_w$是自己的加法的逆，而对其他的都有$-x$作为其加法的逆</p>\n<h5 id=\"7）补码非的位级表示\"><a href=\"#7）补码非的位级表示\" class=\"headerlink\" title=\"7）补码非的位级表示\"></a>7）补码非的位级表示</h5><p>​    方法一：对每一位求补，再对结果加1</p>\n<p>​    方法二：找到最右边的第一个1的位置，然后将该位置左边的所有为取反</p>\n<h4 id=\"2-4浮点数\"><a href=\"#2-4浮点数\" class=\"headerlink\" title=\"2.4浮点数\"></a>2.4浮点数</h4><ul>\n<li>IEEE标准：</li>\n</ul>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数标准分类.PNG\" alt=\"浮点数标准分类\"></p>\n<ul>\n<li>浮点数规格化的值（frac、exp）</li>\n</ul>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数规格化的值.PNG\" alt=\"浮点数规格化的值\"></p>\n<ul>\n<li><p>对于非规格化值：E=1-Bisas，M=f，不包括隐含的开头的1 <img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数规格化的值.PNG\" alt=\"浮点数规格化的值\"> </p>\n</li>\n<li><p>舍入</p>\n</li>\n</ul>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\浮点数舍入.PNG\" alt=\"浮点数舍入\"></p>\n<p>​    将float或double转化成int，值将向零舍入                    </p>\n<h3 id=\"三、程序的机器级表示\"><a href=\"#三、程序的机器级表示\" class=\"headerlink\" title=\"三、程序的机器级表示\"></a>三、程序的机器级表示</h3><h4 id=\"3-3数据格式\"><a href=\"#3-3数据格式\" class=\"headerlink\" title=\"3.3数据格式\"></a>3.3数据格式</h4><p>c数据类型的宽度</p>\n<table>\n<thead>\n<tr>\n<th>c数据类型</th>\n<th>32位</th>\n<th>64位</th>\n<th>x86-64</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4</td>\n<td>4</td>\n<td>4</td>\n</tr>\n<tr>\n<td>long</td>\n<td>4</td>\n<td>8</td>\n<td>8</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4</td>\n<td>4</td>\n<td>4</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>8</td>\n<td>8</td>\n</tr>\n<tr>\n<td>long double</td>\n<td>-</td>\n<td>-</td>\n<td>10/16</td>\n</tr>\n<tr>\n<td>pointer</td>\n<td>4</td>\n<td>8</td>\n<td>8</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-4访问信息\"><a href=\"#3-4访问信息\" class=\"headerlink\" title=\"3.4访问信息\"></a>3.4访问信息</h4><ul>\n<li><p>常规的movq指令只能以表示为32位补码数字的立即数作为源操作数，然后把这个值符号扩展到64位的值放大目的位置；</p>\n</li>\n<li><p>MOVZ类中的指令把目的中剩余的字节填充为0，而MOVS类中的指令通过符号扩展来填充，把源操作数的最高位进行复制。</p>\n</li>\n</ul>\n<p>​    MOVZ类（零扩展）的指令：以寄存器或地址内存作为源，以寄存器作为目的；</p>\n<p>​    MOVS类（符号扩展）的指令：以寄存器或地址内存作为源，以寄存器作为目的；cltq指令无操作数：只作用于%eax和%rax</p>\n<h4 id=\"3-5算术和逻辑操作\"><a href=\"#3-5算术和逻辑操作\" class=\"headerlink\" title=\"3.5算术和逻辑操作\"></a>3.5算术和逻辑操作</h4><p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\算术和逻辑操作指令.PNG\" alt=\"算术和逻辑操作指令\"></p>\n<p>（1）leap指令目的操作数必须是寄存器</p>\n<p>（2）左移指令有两个：SAL和SHL，两者效果一样，都是右边补0；右移指令不同，SAR执行算术移位，补充符号位，而SHR执行逻辑移位，补充0</p>\n<p>（3）特殊的算术操作</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\特殊的操作指令.PNG\" alt=\"特殊的操作指令\"></p>\n<p>有符号除法指令 idivl 将%rdx高64位和%rax低64位中的128位作为被除数，而除数作为指令的操作数给出。指令将商存储在%rax，余数存储在%rdx</p>\n<p>cqto指令可以不需要操作数，隐含读出%rax的符号位并将其复制到%rdx的每一位</p>\n<h4 id=\"3-6控制\"><a href=\"#3-6控制\" class=\"headerlink\" title=\"3.6控制\"></a>3.6控制</h4><p>（1）leaq指令不改变条件码</p>\n<p>（2）CMP指令和TEST指令只改变条件码，前者基于sub，后者基于and</p>\n<p>（3）条件码通常不会直接读取，常用使用方法：</p>\n<p>​    a、根据条件码的某种组合将一个字节设置为0或1（即set指令）</p>\n<p>​    b、条件跳转到程序的某个其他部分</p>\n<p>​    c、有条件的传送数据</p>\n<p>（4）set指令：</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\set指令.PNG\" alt=\"set指令\"></p>\n<h4 id=\"3-7过程\"><a href=\"#3-7过程\" class=\"headerlink\" title=\"3.7过程\"></a>3.7过程</h4><p> （1）传递控制、传递数据、分配和释放内存</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\栈结构.PNG\" alt=\"栈结构\"></p>\n<p>（2）调用函数前，把所有的参数都先存储，包括形参，存储完毕才开始调用函数</p>\n<p>（3）栈上的局部变量（局部数据必须用主存的情况)</p>\n<p>​    1）寄存器不足够存放所有的本地数据</p>\n<p>​    2）对一个局部变量使用取址符&amp;，因此必须为其产生一个地址</p>\n<p>​    3）某些局部变量是数组或结构，因此必须通过数组或结构引用访问到。</p>\n<p>注：寄存器是唯一被所有过程共享的资源</p>\n<h4 id=\"3-10对抗缓冲区溢出\"><a href=\"#3-10对抗缓冲区溢出\" class=\"headerlink\" title=\"3.10对抗缓冲区溢出\"></a>3.10对抗缓冲区溢出</h4><p>方法：1、栈随机化 ；2、栈破坏检测 ；3、限制可执行代码区域</p>\n<h4 id=\"3-11过程中的浮点代码\"><a href=\"#3-11过程中的浮点代码\" class=\"headerlink\" title=\"3.11过程中的浮点代码\"></a>3.11过程中的浮点代码</h4><ul>\n<li><p>XMM寄存器8xmn0~ 8xmm7最多可以传递8个浮点参数。按照参数列出的顺序使用这些寄存器。可以通过栈传递额外的浮点参数。</p>\n</li>\n<li><p>函数使用寄存器%xmm0来返回浮点值。</p>\n</li>\n<li><p>所有的XMM寄存器都是调用者保存的。被调用者可以不用保存就覆盖这些寄存器<br>中任意一个。</p>\n<p>| 单精度 | 双精度 | 效果   | 描述                    |<br>| —— | —— | —— | ———————– |<br>| vxorps | vorpd  | D&lt;-x*y | 位级异或（EXCLUSIVE-OR) |<br>| vandps | andpd  | D&lt;-x&amp;y | 位级与（AND）           |</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>基于</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ucomiss x,y</td>\n<td>y-x</td>\n<td>比较单精度值</td>\n</tr>\n<tr>\n<td>ucomisd x,y</td>\n<td>y-x</td>\n<td>比较双精度值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"四、处理器体系结构\"><a href=\"#四、处理器体系结构\" class=\"headerlink\" title=\"四、处理器体系结构\"></a>四、处理器体系结构</h3><p>1、程序计数器PC保存当前正在执行指令的地址</p>\n<p>2、内存从概念上来说就是一个很大的字节数组，保存着程序和数据。Y86-64程序用虚拟地址来引用内存位置。硬件和操作系统软件联合起来将虚拟地址翻译成实际或物理地址</p>\n<p>3、Y86-64每条指令需要1~10个字节不等，每条指令的第一个字节表明指令的类型，这个字节分为两部分，每部分4位：高四位是代码部分，低四位是指令部分。功能值只有在一组相关指令共用一个代码时才有用。</p>\n<p>4、指令集的一个重要性质就是每个字节编码必须有唯一的解释</p>\n<p>5、时钟寄存器：存储单个字：PC、条件代码和程序状态Stat                                                                                                                  随机访问存储器：存储多个字</p>\n<p>6、指令处理：</p>\n<p>取指、译码、执行、访存、写回、更新PC</p>\n<p>7、SEQ的实现包括组合逻辑和两种存储设备：时钟寄存器和随机访问寄存器。四个硬件单元对时序控制：程序计数器、条件码寄存器、数据内存和寄存器文件，通过时钟信号控制。</p>\n<p>8、组织原则：从不读回，即处理器从来不需要为了完成一条指令的执行而去读由该指令更新了的状态。</p>\n<p>9、每个周期开始前，状态单元（PC、条件码、数据内存、寄存器文件）是根据前一条指令设置的。信号传播通过组合逻辑，创建出新的状态单元的值。</p>\n<h3 id=\"五、优化程序性能\"><a href=\"#五、优化程序性能\" class=\"headerlink\" title=\"五、优化程序性能\"></a>五、优化程序性能</h3><ul>\n<li><p>程序性能标准：每元素的周期数CPE</p>\n</li>\n<li><p>优化方法：</p>\n<p>1、消除循环低效率：代码移动：</p>\n<p>2、减少过程调用</p>\n<p>3、消除不必要的内存引用</p>\n<p>4、循环展开：减少迭代次数</p>\n<p>5、提高并行性：多个累计变量并行求、重新结合变换</p>\n</li>\n<li><p>课本总结：</p>\n<p>1）高级设计：算法和数据结构</p>\n<p>2）基本编码原则：</p>\n<ul>\n<li><p>消除连续的函数调用：将计算移动到循环外</p>\n</li>\n<li><p>消除不必要的内存引用：引用临时变量保存中间结果，最后结果得出才放入数组或全局变量</p>\n</li>\n</ul>\n<p>3）低级优化：</p>\n<ul>\n<li><p>展开循环，降低开销，并且使进一步优化成为可能</p>\n</li>\n<li><p>通过使用例如多个累积变量和重新结合等技术，提高指令集并行</p>\n</li>\n<li><p>用功能性的风格重写条件操作，使得编译采用条件数据传送</p>\n</li>\n</ul>\n</li>\n<li><p>限制因素：</p>\n<p>1、寄存器溢出</p>\n<p>2、分支预测错误和预测错误处罚：不过分关心可预测的分支、书写适合条件传送的代码</p>\n</li>\n</ul>\n<h3 id=\"六、存储器层次结构\"><a href=\"#六、存储器层次结构\" class=\"headerlink\" title=\"六、存储器层次结构\"></a>六、存储器层次结构</h3><h4 id=\"6-1存储技术\"><a href=\"#6-1存储技术\" class=\"headerlink\" title=\"6.1存储技术\"></a>6.1存储技术</h4><h6 id=\"6-1-1随机访问存储器\"><a href=\"#6-1-1随机访问存储器\" class=\"headerlink\" title=\"6.1.1随机访问存储器\"></a>6.1.1随机访问存储器</h6><p>随机访问存储器分（RAM）为两类：静态SRAM（更快）和动态DRAM</p>\n<p>（1）静态（SRAM）</p>\n<p>SRAM将每个位存储在一个双稳态的存储器单元，每个单元由一个六晶体管电路实现，可无限期保持在两个不同的电压配置或状态之一</p>\n<p>（2）动态（DRAM）</p>\n<p>DRAM将每个位存储为对一个电容的充电，对干扰敏感且不能恢复</p>\n<p>对比：</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\SRAM和DRAM对比.PNG\" alt=\"SRAM和DRAM对比\"></p>\n<p>（3）传统的DRAM</p>\n<p>DRAM芯片中的单元（位）被分成d个超单元，每个超单元由w个DRAM单元组成，一个d*w的DRAM存储了dw位信息。超单元被组织成r行c列的矩阵，rc=d。</p>\n<p>每个超单元存储一个字节</p>\n<p>(4)内存模块</p>\n<p>–DRAM芯片封装在内存模块中，插到主板的扩展槽上</p>\n<p>–内存地址A取值过程：</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\6.1.1内存地址取值.PNG\" alt=\"6.1.1内存地址取值\"></p>\n<p>（5）增强的DRAM</p>\n<p>快页模式DRAM、扩展数据输出DRAM、同步DRAM、双倍数据速率同步DRAM、视频RAM</p>\n<p>（6）非易失性存储器</p>\n<p>ROM</p>\n<p>（7）访问主存</p>\n<p>总线：能够携带地址、数据和控制信号，分为：系统总线和内存总线</p>\n<h6 id=\"6-12磁盘存储\"><a href=\"#6-12磁盘存储\" class=\"headerlink\" title=\"6.12磁盘存储\"></a>6.12磁盘存储</h6><p>磁盘读取时间计算：</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\磁盘读取时间计算.PNG\" alt=\"磁盘读取时间计算\"></p>\n<h4 id=\"6-2局部性\"><a href=\"#6-2局部性\" class=\"headerlink\" title=\"6.2局部性\"></a>6.2局部性</h4><p>   (1)重复引用相同局部变量的程序具有良好的时间局部性</p>\n<p>（2）步长越小，空间局部性越好</p>\n<p>（3）对于取值指令，循环具有良好的时间和空间局部性，循环体越小，循环迭代次数越多，局部性越好</p>\n<h4 id=\"6-3存储器层次结构\"><a href=\"#6-3存储器层次结构\" class=\"headerlink\" title=\"6.3存储器层次结构\"></a>6.3存储器层次结构</h4><p>存储器层次结构</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\存储器层次结构.PNG\" alt=\"存储器层次结构\"></p>\n<h4 id=\"6-4高速缓存存储器\"><a href=\"#6-4高速缓存存储器\" class=\"headerlink\" title=\"6.4高速缓存存储器\"></a>6.4高速缓存存储器</h4><p>缓存不命中：</p>\n<ul>\n<li><p>冷不命中（强制性不命中）：</p>\n<p>k层缓存有空行，程序最开始运行时均为冷不命中</p>\n</li>\n<li><p>冲突不命中</p>\n<p>k层中没有空行 </p>\n</li>\n<li><p>容量不命中</p>\n</li>\n</ul>\n<p>组相连高速缓存、组相连高速缓存、全相连高速缓存</p>\n<h4 id=\"6-5编写高速缓存存储器\"><a href=\"#6-5编写高速缓存存储器\" class=\"headerlink\" title=\"6.5编写高速缓存存储器\"></a>6.5编写高速缓存存储器</h4><p>写命中：</p>\n<p>直写：高速缓存中更新的数据立即写回到低一层中</p>\n<p>写回：尽可能推迟更新，当替换算法要驱逐这个更新过的块时，才把它写到紧接着的低一层中</p>\n<p>写不命中：</p>\n<p>写分配：加载相应的低一层的块到高速缓存中，然后更新这个高速缓存块</p>\n<p>非写分配：避开高速缓存，直接把这个字写到低一层中</p>\n<p>**直写高速缓存通常时写分配的，写回高速缓存通常是非写分配的</p>\n<h4 id=\"6-6综合：高速缓存对程序性能的影响\"><a href=\"#6-6综合：高速缓存对程序性能的影响\" class=\"headerlink\" title=\"6.6综合：高速缓存对程序性能的影响\"></a>6.6综合：高速缓存对程序性能的影响</h4><p>如果一个高速缓存的块大小为B字节，那么一个步长为k（字）的引用模式平均每次循环迭代会有min（1，（wordsize*k)/k））次缓存不命中</p>\n<h3 id=\"八、异常控制流\"><a href=\"#八、异常控制流\" class=\"headerlink\" title=\"八、异常控制流\"></a>八、异常控制流</h3><h4 id=\"8-1异常\"><a href=\"#8-1异常\" class=\"headerlink\" title=\"8.1异常\"></a>8.1异常</h4><p>（1）异常是控制流中的突变，用来响应处理器状态中的变化。是异常控制流的一种形式，一部分由硬件实现，一部分由操作系统实现</p>\n<p>（2）事件处理：</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\8.1事件处理.PNG\" alt=\"8.1事件处理\"></p>\n<p>（3）异常分类</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\异常分类.PNG\" alt=\"异常分类\"></p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\异常分类2.PNG\" alt=\"异常分类2\"></p>\n<h4 id=\"8-2进程\"><a href=\"#8-2进程\" class=\"headerlink\" title=\"8.2进程\"></a>8.2进程</h4><p>进程：一个执行中程序的实例。系统中每个程序都运行在某个进程的上下文中。上下文是由程序正确运行所需的状态组成</p>\n<p>进程提供的关键抽象：</p>\n<p>一个独立的逻辑控制流、一个私有的地址空间</p>\n<ul>\n<li><p>并发流：一个逻辑流的执行在时间上与另一个流重叠，称为并发流，这两个流被称为并发的运行。多个流并发地执行一般现象被称为并发。一个进程和其他进程轮流运行的概念称为多任务。一个进程执行它的控制流的一部分的每一时间段叫做时间片，因此，多任务也叫时间分片。</p>\n</li>\n<li><p>如果两个流并发的运行在不同的处理器核或计算机上，那么我们称它们为并行流，它们并行地运行，且并行地执行</p>\n</li>\n<li><p>进程地址空间</p>\n<p><img src=\"C:\\Users\\Zhangyue\\Desktop\\docs\\mix\\知识图片\\深入理解计算机系统\\进程地址空间.PNG\" alt=\"进程地址空间\"></p>\n</li>\n<li><p>用户模式和内核模式：进程从用户模式切换到内核模式的唯一方式是异常</p>\n</li>\n<li><p>上下文切换：</p>\n<p>1）保存当前进程的上下文；  2）恢复某个先前被抢占的进程被保存的上下文； 3）将控制传递给这个新恢复的进程</p>\n</li>\n</ul>\n<h4 id=\"8-4进程控制\"><a href=\"#8-4进程控制\" class=\"headerlink\" title=\"8.4进程控制\"></a>8.4进程控制</h4><ul>\n<li>进程的三种状态：</li>\n</ul>\n<p>运行：进程要么被执行，要么等待被执行且被内核调度</p>\n<p>停止：进程的执行被挂起，且不会被调度。当收到SIGSTOP 、SIGTSTP、SIGTTIN、SIGTOUT信号时，进程停止，并且保持到收到SIGCOUT信号</p>\n<p>终止：1）收到一个信号，该信号的默认行为是终止；2）从主程序返回；3）调用exit函数</p>\n<ul>\n<li>父进程和子进程最大的区别是PID不同。</li>\n</ul>\n<p>fork被调用一次，返回两次。一次是在父进程中，fork返回子进程的PID，一次是在新建的子进程中，返回0；</p>\n<ul>\n<li><p>子进程和父进程：</p>\n<p>1）fork函数调用一次，返回两次；2）子进程和父进程并发运行；3）相同但是独立的地址空间；4）共享文件</p>\n</li>\n<li><p>pid_t wait_pid(int *statusp) : 如果成功，返回子进程的PID；如果WNOHANG，返回0；如果其他错误，返回-1</p>\n</li>\n<li><p>unsigned int sleep(unsigned int secs)：返回还要休眠的秒数</p>\n</li>\n<li><p>int pause(void)：总是返回-1，让函数休眠，直到该进程接收到另一个信号</p>\n</li>\n<li><p>execve:在当前进程的上下文中加载并运行一个新程序，从不返回，（如果找不到filename，才会返回到调用程序）。</p>\n</li>\n</ul>\n<h4 id=\"8-5-5编写信号处理程序\"><a href=\"#8-5-5编写信号处理程序\" class=\"headerlink\" title=\"8.5.5编写信号处理程序\"></a>8.5.5编写信号处理程序</h4><p>1、安全的信号处理</p>\n<p>（1）处理程序要尽可能的简单</p>\n<p>（2）在处理程序中只调用异步信号安全的函数</p>\n<p>（3）保存和恢复errno</p>\n<p>（4）阻塞所有信号，保护对共享数据结构的访问</p>\n<p>（5）用volatile声明全局变量</p>\n<p>（6）用sig_atomic_t声明标志</p>\n<p>2、正确的信号处理：未处理的信号不排队</p>\n<p>3、可移植的信号处理</p>\n<p>由于本人有一丢丢懒~，漏掉的一些内容懒得更新，排版也只是凑合，还请大家原谅啦啦—–</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjsvd3u4p00048su3q8knf9rx","tag_id":"cjsvd3u4u00058su3igvbsh4h","_id":"cjsvd3u4x00078su3p1bx9o9v"},{"post_id":"cjsvd3u4p00048su3q8knf9rx","tag_id":"cjsvd3u4w00068su3iufva0x4","_id":"cjsvd3u4x00088su3s4zj2gn4"}],"Tag":[{"name":"计算机系统","_id":"cjsvd3u4u00058su3igvbsh4h"},{"name":"期末复习","_id":"cjsvd3u4w00068su3iufva0x4"}]}}